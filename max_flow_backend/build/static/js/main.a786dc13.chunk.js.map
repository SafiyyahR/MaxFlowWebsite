{"version":3,"sources":["components/title.js","pages/index.js","components/graph-form.js","components/custom-modal.js","components/edge-form.js","pages/maxflow.js","pages/404.js","pages/loading.js","components/graph-template.js","pages/results.js","components/footer.js","components/scroll-to-top.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","title","state","this","Helmet","meta","name","content","link","Component","Home","screenHeight","window","screen","height","Container","style","minHeight","className","Row","Col","lg","span","offset","GraphForm","noNodes","noNodesClass","noNodesFeedback","noEdges","noEdgesClass","noEdgesFeedback","validateNoEdges","bind","validateNoNodes","sendDataToParent","getData","event","target","value","parseInt","setState","maxNoOfEdges","Form","Group","as","controlId","Label","column","md","Control","onChange","Feedback","type","CustomModal","closeModal","onHide","Modal","show","size","aria-labelledby","centered","Header","closeButton","Body","src","alt","Footer","Button","variant","onClick","EdgeForm","index","nodes","startNodeClass","startNodeFeedback","startNode","endNodeClass","endNodeFeedback","endNode","weightClass","weightFeedback","weight","validateStartNode","validateWeight","validateEndNode","MaxFlow","handleFile","e","details","result","split","nodeEdgesFileValid","edgeArrayFile","edgeArrayFileValid","txtFileClassFeedBack","txtFileClass","length","edge","edgeValid","validEdge","index1","push","uploadBtnClass","uploadingBtnClass","showModal","graphClass","fileClass","randomClass","nodeEdgesValid","edgeArray","edgeArrayValid","nodeEdgesGrValid","noEdgesGr","noNodesGr","maxWeightValid","txtFileChosen","noEdgesFile","noNodesFile","handleOptionSelected","validateMaxWeight","getDataFromSubForm","getDataFromEdges","getDataFromRand","validateFile","setShowModal","openModal","clearForm","data","valid","file","fileData","FileReader","onloadend","readAsText","list","newList","isValid","choice","fileMaxFlowBtnClass","infoDis","fileDis","graphDis","rows","key","detailsInfo","detailsFile","detailsRand","Check","label","id","defaultChecked","to","pathname","option","disabled","File","custom","Input","files","accept","data-browse","Spinner","animation","role","aria-hidden","Error","message","href","Loading","Graph","elements","stylesheet","selector","width","shape","minZoom","maxZoom","maxZoon","cy","Results","urlString","error","isLoaded","inputElements","residualElements","resultElements","flowBreakDown","maxFlow","originalGraph","location","getResults","handleResultsSuccess","downloadtxt","fetch","method","body","JSON","stringify","headers","then","res","json","sent","sink","edges","nodesPerRow","Math","ceil","sqrt","maxWidth","xpos","ypos","original","array","sourceName","start","sinkName","end","residual","breakDownFlow","breakDownOfFlow","outerList","row","i","indexOf","graph","txtContent","element","document","createElement","Blob","URL","createObjectURL","download","click","map","item","ScrollToTop","showBtn","scrollToTop","checkIfScrolled","scrollTo","top","behavior","pageYOffset","screenY","addEventListener","removeEventListener","display","icon","faArrowUp","NavBar","Navbar","expand","sticky","Brand","Toggle","aria-controls","Collapse","Nav","exact","activeClassName","NavItem","faHome","faCalculator","App","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a786dc13.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Helmet } from 'react-helmet'\r\nexport default class Title extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        var title = this.props.title;\r\n        if (title == null) {\r\n            title = \"Error | OCS CMB\";\r\n        }\r\n        this.state = {\r\n            title: title\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { title } = this.state;\r\n        return (\r\n            <Helmet\r\n                title={title}\r\n                meta={[\r\n                    { name: \"author\", content: \"Safiyyah Thur Rahman\" }\r\n                ]}\r\n                link={[\r\n                    {\r\n                        \"rel\": \"icon\",\r\n                        \"type\": \"image/png\",\r\n                        \"href\": \"./images/logo.png\",\r\n                        \"sizes\": \"16x16\"\r\n                    }\r\n                ]}\r\n            />\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Container, Col, Row } from 'react-bootstrap'\r\nimport '../external-stylesheet.css'\r\nimport Title from '../components/title'\r\nexport default class Home extends Component {\r\n    title = \"Home | MX flow\";\r\n    render() {\r\n        const screenHeight = window.screen.height + \"px\";\r\n        return (\r\n            <Container style={{ minHeight: screenHeight }} className=\"pt-5\">\r\n                <Title title={this.title} />\r\n                <Row>\r\n                    <Col lg={{ span: 8, offset: 2 }}>\r\n                        <h2>What is Max Flow?</h2>\r\n                        <p>The maximum quantity of flow that passes from the source to the sink of a graph.</p>\r\n                        <h2>What is Min-Cut?</h2>\r\n                        <p>Find s-t cuts and then decide which one is the minimum using the summation of the capacities of the edges chosen in each cut.</p>\r\n                        <h2>Pseudo code</h2>\r\n                        <h3>Calculate Max Flow - Pseudocode</h3>\r\n                        <Row>\r\n                            <ol className=\"pseudocode\">\r\n                                <li><b>.</b> &nbsp;SET max_flow TO 0</li>\r\n                                <li><b>.</b> &nbsp;WHILE path FROM source to sink exists (use BFS or DFS)</li>\r\n                                <ol>\r\n                                    <li><b>.</b> &nbsp;FIND minimum flow in path FOUND</li>\r\n                                    <li><b>.</b> &nbsp;ADD minimum flow to max_flow</li>\r\n                                </ol>\r\n                                <li><b>.</b> &nbsp;RETURN max_flow</li>\r\n                            </ol>\r\n                        </Row>\r\n                        <h2>References</h2></Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Col, Row, Form, Container } from 'react-bootstrap'\r\nexport default class GraphForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            noNodes: 0,\r\n            noNodesClass: \"hide\",\r\n            noNodesFeedback: \"Please enter an integer.\",\r\n            noEdges: 0,\r\n            noEdgesClass: \"hide\",\r\n            noEdgesFeedback: \"Please enter an integer.\",\r\n        }\r\n        this.validateNoEdges = this.validateNoEdges.bind(this);\r\n        this.validateNoNodes = this.validateNoNodes.bind(this);\r\n        this.sendDataToParent = this.sendDataToParent.bind(this);\r\n    }\r\n\r\n    sendDataToParent() {\r\n        if (this.state.noNodes !== 0 && this.state.noEdges !== 0) {\r\n            return this.props.getData({ \"noNodes\": this.state.noNodes, \"noEdges\": this.state.noEdges, \"valid\": true });\r\n        } else {\r\n            return this.props.getData({ \"valid\": false });\r\n        }\r\n    }\r\n    validateNoNodes(event) {\r\n        var noNodes = event.target.value;\r\n        var noNodesFeedback = \"\";\r\n        var noNodesClass = \"hide\";\r\n        if (noNodes != parseInt(noNodes)) {\r\n            noNodesFeedback = \"Please enter an integer.\";\r\n            noNodesClass = \"show\";\r\n            noNodes = 0\r\n        } else if (noNodes > 3 && noNodes <= 100) {\r\n            noNodesClass = \"hide\";\r\n            noNodesFeedback = \"\";\r\n            noNodes = parseInt(noNodes);\r\n        } else if (noNodes <= 3) {\r\n            noNodesFeedback = \"Please enter an integer greater than 3.\"\r\n            noNodesClass = \"show\";\r\n            noNodes = 0\r\n        } else if (noNodes > 100) {\r\n            noNodesFeedback = \"Please enter an integer lesser than 100.\";\r\n            noNodesClass = \"show\";\r\n            noNodes = 0;\r\n        }\r\n        this.setState({ noNodesFeedback, noNodesClass, noNodes }, () => {\r\n            this.validateNoEdges(\"\");\r\n            this.sendDataToParent()\r\n        });\r\n\r\n    }\r\n\r\n    validateNoEdges(event) {\r\n        var noEdges = 0\r\n        if (event != \"\") {\r\n            noEdges = event.target.value;\r\n        }\r\n        else {\r\n            noEdges = this.state.noEdges;\r\n        }\r\n        var noNodes = this.state.noNodes;\r\n        var maxNoOfEdges = (noNodes * noNodes) - (3 * noNodes) + 2;\r\n        var noEdgesFeedback = \"\";\r\n        var noEdgesClass = \"hide\";\r\n        if (noEdges != parseInt(noEdges)) {\r\n            noEdgesFeedback = \"Please enter an integer.\";\r\n            noEdgesClass = \"show\";\r\n            noEdges = 0;\r\n        } else if (noNodes === 0) {\r\n            noEdgesFeedback = \"Please enter an integer for the number of nodes first.\";\r\n            noEdgesClass = \"show\";\r\n            noEdges = 0;\r\n        } else if (noEdges < noNodes) {\r\n            noEdgesFeedback = \"Please enter an integer that is greater than \" + (noNodes - 1) + \".\";\r\n            noEdgesClass = \"show\";\r\n            noEdges = 0;\r\n        } else if (noEdges >= noNodes && noEdges <= maxNoOfEdges) {\r\n            noEdgesFeedback = \"\";\r\n            noEdgesClass = \"hide\";\r\n            noEdges = parseInt(noEdges);\r\n        } else if (noEdges > maxNoOfEdges) {\r\n            noEdgesFeedback = \"Please enter an integer less than \" + maxNoOfEdges;\r\n            noEdgesClass = \"show\";\r\n            noEdges = 0;\r\n        }\r\n        this.setState({ noEdges, noEdgesClass, noEdgesFeedback }, () => {\r\n            this.sendDataToParent();\r\n        });\r\n\r\n    }\r\n    render() {\r\n        const { noEdgesClass, noNodesClass, noEdgesFeedback, noNodesFeedback } = this.state;\r\n        return (\r\n            <Container className=\"p-0 m-0\">\r\n                <Form.Group as={Row} controlId=\"form-no-nodes\">\r\n                    <Form.Label column md={4}>Number of Nodes in Graph</Form.Label>\r\n                    <Col md={4}>\r\n                        <Form.Control onChange={this.validateNoNodes} />\r\n                        <Form.Control.Feedback type=\"invalid\" className={noNodesClass}>\r\n                            {noNodesFeedback}\r\n                        </Form.Control.Feedback></Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"form-no-edges\">\r\n                    <Form.Label column md={4}>Number of Edges in Graph</Form.Label>\r\n                    <Col md={4}>\r\n                        <Form.Control onChange={this.validateNoEdges} />\r\n                        <Form.Control.Feedback type=\"invalid\" className={noEdgesClass}>\r\n                            {noEdgesFeedback}\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                </Form.Group>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Col, Row, Button, Modal } from 'react-bootstrap'\r\nexport default class CustomModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.closeModal = this.closeModal.bind(this);\r\n    }\r\n\r\n    closeModal() {\r\n        this.props.onHide(false);\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal show={this.props.show} onHide={this.closeModal} size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        <h3>File Format</h3>\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Row>\r\n                        <Col lg={{ span: 10, offset: 2 }}>\r\n                            <img src=\"./images/fileFormat.png\" className=\"img-fluid\" alt=\"file format to be uploaded\" />\r\n                        </Col>\r\n                    </Row>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={this.closeModal}>\r\n                        Close\r\n            </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Col, Row, Form } from 'react-bootstrap'\r\nexport default class EdgeForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const index = props.index;\r\n        const noNodes = props.nodes;\r\n        this.state = {\r\n            index: index,\r\n            noNodes: noNodes,\r\n            startNodeClass: \"hide\",\r\n            startNodeFeedback: \"\",\r\n            startNode: -1,\r\n            endNodeClass: \"hide\",\r\n            endNodeFeedback: \"\",\r\n            endNode: -1,\r\n            weightClass: \"hide\",\r\n            weightFeedback: \"\",\r\n            weight: 0\r\n        }\r\n        this.validateStartNode = this.validateStartNode.bind(this);\r\n        this.validateWeight = this.validateWeight.bind(this);\r\n        this.validateEndNode = this.validateEndNode.bind(this);\r\n        this.sendDataToParent = this.sendDataToParent.bind(this);\r\n    }\r\n\r\n    sendDataToParent() {\r\n        if (this.state.endNode !== -1 && this.state.startNode !== -1 && this.state.weight !== 0) {\r\n            return this.props.getData({ \"index\": this.state.index, \"edge\": [this.state.startNode, this.state.weight, this.state.endNode], \"valid\": true });\r\n        } else {\r\n            return this.props.getData({ \"index\": this.state.index, \"valid\": false });\r\n        }\r\n    }\r\n\r\n    validateEndNode(event) {\r\n        var endNode = event.target.value;\r\n        var endNodeClass = \"hide\";\r\n        var endNodeFeedback = \"\";\r\n        if (endNode != parseInt(endNode)) {\r\n            endNodeFeedback = \"Please enter an integer\";\r\n            endNodeClass = \"show\";\r\n            endNode = -1;\r\n        } else if (endNode == 0) {\r\n            endNodeFeedback = \"Node 0 cannot be an end node.\";\r\n            endNodeClass = \"show\";\r\n            endNode = -1;\r\n        } else if (endNode < 0 || endNode >= this.state.noNodes) {\r\n            endNodeFeedback = \"Node \" + endNode + \" is not in the graph.\";\r\n            endNodeClass = \"show\";\r\n            endNode = -1;\r\n        } else if (endNode == this.state.startNode) {\r\n            endNodeFeedback = \"Start node and end node cannot be the same.\";\r\n            endNodeClass = \"show\";\r\n            endNode = -1;\r\n        } else if (endNode > 0 && endNode <= this.state.noNodes - 1) {\r\n            endNodeFeedback = \"\";\r\n            endNodeClass = \"hide\";\r\n            endNode = parseInt(endNode);\r\n        }\r\n        this.setState({ endNodeFeedback, endNodeClass, endNode }, () => {\r\n            this.sendDataToParent();\r\n        });\r\n    }\r\n\r\n    validateWeight(event) {\r\n        var weight = event.target.value;\r\n        var weightClass = \"hide\";\r\n        var weightFeedback = 0;\r\n        if (weight != parseInt(weight)) {\r\n            weightFeedback = \"Please enter an integer.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else if (weight <= 0) {\r\n            weightFeedback = \"Weight of an edge must be greater than zero.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else if (weight > 2147483647) {\r\n            weightFeedback = \"Weight of an edge must be lesser than 2147483647.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else {\r\n            weightFeedback = \"\";\r\n            weightClass = \"hide\";\r\n            weight = parseInt(weight);\r\n        }\r\n        this.setState({ weight, weightClass, weightFeedback }, () => {\r\n            this.sendDataToParent();\r\n        })\r\n    }\r\n    validateStartNode(event) {\r\n        var startNode = event.target.value;\r\n        var startNodeClass = \"hide\";\r\n        var startNodeFeedback = \"-1\";\r\n        if (startNode != parseInt(startNode)) {\r\n            startNodeFeedback = \"Please enter an integer.\";\r\n            startNodeClass = \"show\";\r\n            startNode = -1;\r\n        } else if (startNode == this.state.noNodes - 1) {\r\n            startNodeFeedback = \"Node \" + (this.state.noNodes - 1) + \" cannot be an start node.\";\r\n            startNodeClass = \"show\";\r\n            startNode = -1;\r\n        } else if (startNode < 0 || startNode >= this.state.noNodes) {\r\n            startNodeFeedback = \"Node \" + startNode + \" is not in the graph.\";\r\n            startNodeClass = \"show\";\r\n            startNode = -1;\r\n        } else if (startNode == this.state.endNode) {\r\n            startNodeFeedback = \"Start node and end node cannot be the same.\";\r\n            startNodeClass = \"show\";\r\n            startNode = -1;\r\n        } else if (startNode >= 0 && startNode < this.state.noNodes - 1) {\r\n            startNodeFeedback = \"\";\r\n            startNodeClass = \"hide\";\r\n            startNode = parseInt(startNode);\r\n        }\r\n        this.setState({ startNodeFeedback, startNodeClass, startNode }, () => {\r\n            this.sendDataToParent();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { index, startNodeClass, startNodeFeedback, endNodeClass, endNodeFeedback, weightClass, weightFeedback } = this.state;\r\n        return (\r\n            <Row >\r\n                <Form.Group controlId={\"form-start-node\" + index}>\r\n                    <Col className=\"form-label-2\">\r\n                        <Form.Label column >Start Node {index + 1}</Form.Label>\r\n                    </Col>\r\n                    <Col >\r\n                        <Form.Control onChange={this.validateStartNode} />\r\n                        <Form.Control.Feedback type=\"invalid\" className={startNodeClass}>\r\n                            {startNodeFeedback}\r\n                        </Form.Control.Feedback>\r\n                    </Col >\r\n                </Form.Group>\r\n                <Form.Group controlId={\"form-weight-edge\" + index}>\r\n                    <Col className=\"form-label-2\">\r\n                        <Form.Label column >Weight {index + 1}</Form.Label>\r\n                    </Col>\r\n                    <Col >\r\n                        <Form.Control onChange={this.validateWeight} />\r\n                        <Form.Control.Feedback type=\"invalid\" className={weightClass}>\r\n                            {weightFeedback}\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                </Form.Group>\r\n                <Form.Group controlId={\"form-end-node\" + index}>\r\n                    <Col className=\"form-label-2\">\r\n                        <Form.Label column  >End Node {index + 1}</Form.Label>\r\n                    </Col>\r\n                    <Col >\r\n                        <Form.Control onChange={this.validateEndNode} />\r\n                        <Form.Control.Feedback type=\"invalid\" className={endNodeClass}>\r\n                            {endNodeFeedback}\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                </Form.Group>\r\n            </Row>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Container, Col, Row, Button, Spinner, Form } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom';\r\nimport '../external-stylesheet.css'\r\nimport Title from '../components/title'\r\nimport GraphForm from '../components/graph-form'\r\nimport CustomModal from '../components/custom-modal';\r\nimport EdgeForm from '../components/edge-form'\r\nexport default class MaxFlow extends Component {\r\n    title = \"Find Max Flow | MX flow\"\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            graphClass: \"show\",\r\n            fileClass: \"hide\",\r\n            randomClass: \"hide\",\r\n            uploadingBtnClass: \"hide\",\r\n            uploadBtnClass: \"show\",\r\n            noNodes: 0,\r\n            noEdges: 0,\r\n            nodeEdgesValid: false,\r\n            edgeArray: [],\r\n            edgeArrayValid: false,\r\n            txtFileClass: \"hide\",\r\n            txtFileClassFeedBack: \"Please upload a file with a txt extension.\",\r\n            nodeEdgesGrValid: false,\r\n            noEdgesGr: 0,\r\n            noNodesGr: 0,\r\n            weightClass: \"hide\",\r\n            weightFeedback: \"\",\r\n            weight: 0,\r\n            maxWeightValid: false,\r\n            txtFileChosen: false,\r\n            noEdgesFile: 0,\r\n            noNodesFile: 0,\r\n            nodeEdgesFileValid: false,\r\n            edgeArrayFile: [],\r\n            edgeArrayFileValid: false\r\n\r\n        }\r\n        this.handleOptionSelected = this.handleOptionSelected.bind(this);\r\n        this.validateMaxWeight = this.validateMaxWeight.bind(this);\r\n        this.getDataFromSubForm = this.getDataFromSubForm.bind(this);\r\n        this.getDataFromEdges = this.getDataFromEdges.bind(this);\r\n        this.getDataFromRand = this.getDataFromRand.bind(this);\r\n        this.validateFile = this.validateFile.bind(this);\r\n        this.setShowModal = this.setShowModal.bind(this);\r\n        this.openModal = this.openModal.bind(this);\r\n        this.clearForm = this.clearForm.bind(this);\r\n    }\r\n\r\n    handleOptionSelected(event) {\r\n        var value = event.target.value;\r\n        if (value && value === \"1\") {\r\n            this.setState({ graphClass: \"show\" });\r\n            this.setState({ fileClass: \"hide\" });\r\n            this.setState({ randomClass: \"hide\" });\r\n        } else if (value && value === \"2\") {\r\n            this.setState({ graphClass: \"hide\" });\r\n            this.setState({ fileClass: \"show\" });\r\n            this.setState({ randomClass: \"hide\" });\r\n        } else if (value && value === \"3\") {\r\n            this.setState({ graphClass: \"hide\" });\r\n            this.setState({ fileClass: \"hide\" });\r\n            this.setState({ randomClass: \"show\" });\r\n        }\r\n\r\n    }\r\n\r\n    validateMaxWeight(event) {\r\n        var weight = event.target.value;\r\n        var weightClass = \"hide\";\r\n        var weightFeedback = 0;\r\n        var maxWeightValid = false;\r\n        if (weight != parseInt(weight)) {\r\n            weightFeedback = \"Please enter an integer.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else if (weight <= 0) {\r\n            weightFeedback = \"Weight of an edge must be greater than zero.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else if (weight > 2147483647) {\r\n            weightFeedback = \"Weight of an edge must be lesser than 2147483647.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else {\r\n            weightFeedback = \"\";\r\n            weightClass = \"hide\";\r\n            weight = parseInt(weight);\r\n            maxWeightValid = true;\r\n        }\r\n        this.setState({ weight, weightClass, weightFeedback, maxWeightValid });\r\n    }\r\n    getDataFromRand(data) {\r\n        if (data && data.valid) {\r\n            this.setState({ noEdgesGr: data.noEdges, noNodesGr: data.noNodes, nodeEdgesGrValid: true });\r\n        } else {\r\n            this.setState({ noEdgesGr: 0, noNodesGr: 0 });\r\n        }\r\n    }\r\n\r\n    validateFile(file) {\r\n        this.setState({ uploadBtnClass: \"hide\", uploadingBtnClass: \"show\" }, () => {\r\n            let fileData = new FileReader();\r\n            fileData.onloadend = this.handleFile;\r\n            fileData.readAsText(file);\r\n        });\r\n    }\r\n    handleFile = (e) => {\r\n        const content = e.target.result;\r\n        var details = content.split(\"\\n\");\r\n        var noEdges = 0;\r\n        var noNodes = 0;\r\n        var nodeEdgesFileValid = false;\r\n        var edgeArrayFile = [];\r\n        var edgeArrayFileValid = false;\r\n        var txtFileClassFeedBack = \"Insufficient details provided.\";\r\n        var txtFileClass = \"show\";\r\n        if (details.length > 2) {\r\n            noNodes = details[0];\r\n            if (noNodes != parseInt(noNodes)) {\r\n                txtFileClassFeedBack = \"Please enter an integer for the number of nodes.\";\r\n                txtFileClass = \"show\";\r\n                noNodes = 0\r\n            } else if (noNodes > 3 && noNodes <= 100) {\r\n                txtFileClass = \"hide\";\r\n                txtFileClassFeedBack = \"\";\r\n                noNodes = parseInt(noNodes);\r\n            } else if (noNodes <= 3) {\r\n                txtFileClassFeedBack = \"Please enter an integer greater than 3 for the number of nodes.\"\r\n                txtFileClass = \"show\";\r\n                noNodes = 0\r\n            } else if (noNodes > 100) {\r\n                txtFileClassFeedBack = \"Please enter an integer lesser than 100 for the number of nodes.\";\r\n                txtFileClass = \"show\";\r\n                noNodes = 0;\r\n            }\r\n            if (noNodes !== 0) {\r\n                noEdges = details[1];\r\n                var maxNoOfEdges = (noNodes * noNodes) - (3 * noNodes) + 2;\r\n                txtFileClassFeedBack = \"\";\r\n                txtFileClass = \"hide\";\r\n                if (noEdges != parseInt(noEdges)) {\r\n                    txtFileClassFeedBack = \"Please enter an integer for the number of edges.\";\r\n                    txtFileClass = \"show\";\r\n                    noEdges = 0;\r\n                } else if (noNodes === 0) {\r\n                    txtFileClassFeedBack = \"Please enter an integer for the number of nodes first for the number of edges.\";\r\n                    txtFileClass = \"show\";\r\n                    noEdges = 0;\r\n                } else if (noEdges < noNodes) {\r\n                    txtFileClassFeedBack = \"Please enter an integer that is greater than \" + (noNodes - 1) + \" for the number of edges.\";\r\n                    txtFileClass = \"show\";\r\n                    noEdges = 0;\r\n                } else if (noEdges >= noNodes && noEdges <= maxNoOfEdges) {\r\n                    txtFileClassFeedBack = \"\";\r\n                    txtFileClass = \"hide\";\r\n                    noEdges = parseInt(noEdges);\r\n                } else if (noEdges > maxNoOfEdges) {\r\n                    txtFileClassFeedBack = \"Please enter an integer less than \" + maxNoOfEdges + \" for the number of edges.\";\r\n                    txtFileClass = \"show\";\r\n                    noEdges = 0;\r\n                }\r\n                if (noEdges != 0) {\r\n                    edgeArrayFileValid = true;\r\n                    nodeEdgesFileValid = true;\r\n                    for (let index = 2; index < (noEdges + 2); index++) {\r\n                        const row = details[index];\r\n                        var edge = row.split(\" \");\r\n                        if (edge.length === 3) {\r\n                            var edgeValid = true;\r\n                            var validEdge = [];\r\n                            for (let index1 = 0; index1 < edge.length; index1++) {\r\n                                if (edge[index1] != parseInt(edge[index1])) {\r\n                                    edgeValid = false;\r\n                                    txtFileClass = \"show\";\r\n                                    txtFileClassFeedBack = \"The file must only contain integers.\";\r\n                                    edgeArrayFile = [];\r\n                                    edgeArrayFileValid = false;\r\n                                    break;\r\n                                } else {\r\n                                    validEdge.push(parseInt(edge[index1]))\r\n                                }\r\n                            }\r\n                            if (edgeValid) {\r\n                                edgeArrayFile.push(validEdge);\r\n                            }\r\n                        } else {\r\n                            txtFileClass = \"show\";\r\n                            txtFileClassFeedBack = \"Edge \" + (index - 2) + \" does not have enough information.\";\r\n                            edgeArrayFile = [];\r\n                            edgeArrayFileValid = false;\r\n                        }\r\n                    }\r\n                    if (edgeArrayFileValid) {\r\n                        txtFileClass = \"hide\";\r\n                        txtFileClassFeedBack = \"\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.setState({ txtFileClass, txtFileClassFeedBack, \"noEdgesFile\": noEdges, \"noNodesFile\": noNodes, nodeEdgesFileValid, edgeArrayFile, edgeArrayFileValid, uploadBtnClass: \"show\", uploadingBtnClass: \"hide\" });\r\n    }\r\n    getDataFromSubForm(data) {\r\n        if (data && data.valid) {\r\n            this.setState({ noEdges: data.noEdges, noNodes: data.noNodes, nodeEdgesValid: true }, () => {\r\n                var list = [];\r\n                for (let index = 0; index < data.noEdges; index++) {\r\n                    list.push([]);\r\n                }\r\n                this.setState({ edgeArray: list });\r\n            });\r\n        } else {\r\n            this.setState({ noEdges: 0, noNodes: 0 }, () => {\r\n                var list = [];\r\n                for (let index = 0; index < data.noEdges; index++) {\r\n                    list.push([]);\r\n                }\r\n                this.setState({ edgeArray: list });\r\n            });\r\n        }\r\n    }\r\n\r\n    getDataFromEdges(data) {\r\n        var newList = this.state.edgeArray;\r\n        if (data && data.valid) {\r\n            newList[data.index] = data.edge;\r\n        } else {\r\n            newList[data.index] = [];\r\n        }\r\n        var isValid = true;\r\n        this.setState({ edgeArray: newList }, () => {\r\n            for (let index = 0; index < newList.length; index++) {\r\n                if (newList[index].length === 0) {\r\n                    isValid = false;\r\n                    break;\r\n                }\r\n\r\n            }\r\n            this.setState({ edgeArrayValid: isValid });\r\n        });\r\n    }\r\n\r\n    openModal(event) {\r\n        this.setShowModal(true);\r\n    }\r\n    setShowModal(choice) {\r\n        this.setState({ showModal: choice });\r\n    }\r\n    clearForm() {\r\n        this.setState({\r\n            showModal: false,\r\n            graphClass: \"show\",\r\n            fileClass: \"hide\",\r\n            randomClass: \"hide\",\r\n            uploadingBtnClass: \"hide\",\r\n            uploadBtnClass: \"show\",\r\n            noNodes: 0,\r\n            noEdges: 0,\r\n            nodeEdgesValid: false,\r\n            edgeArray: [],\r\n            edgeArrayValid: false,\r\n            txtFileClass: \"hide\",\r\n            txtFileClassFeedBack: \"Please upload a file with a txt extension.\",\r\n            nodeEdgesGrValid: false,\r\n            noEdgesGr: 0,\r\n            noNodesGr: 0,\r\n            weightClass: \"hide\",\r\n            weightFeedback: \"\",\r\n            weight: 0,\r\n            maxWeightValid: false,\r\n            txtFileChosen: false,\r\n            noEdgesFile: 0,\r\n            noNodesFile: 0,\r\n            nodeEdgesFileValid: false,\r\n            edgeArrayFile: [],\r\n            edgeArrayFileValid: false\r\n        });\r\n    }\r\n    render() {\r\n        const { noNodes, graphClass, fileClass, randomClass, uploadingBtnClass, uploadBtnClass, fileMaxFlowBtnClass, noEdges, txtFileClass, txtFileClassFeedBack, weightClass, weightFeedback, showModal } = this.state;\r\n        const infoDis = this.state.edgeArrayValid && this.state.nodeEdgesValid ? \"\" : \"disabled\";\r\n        const fileDis = this.state.edgeArrayFileValid && this.state.nodeEdgesFileValid ? \"\" : \"disabled\";\r\n        const graphDis = this.state.maxWeightValid && this.state.nodeEdgesGrValid ? \"\" : \"disabled\";\r\n        if (noEdges > 0) {\r\n            var rows = [];\r\n            for (let index = 0; index < noEdges; index++) {\r\n                rows.push(<EdgeForm key={index} index={index} nodes={noNodes} getData={this.getDataFromEdges} />);\r\n            }\r\n        }\r\n        const detailsInfo = { \"noNodes\": this.state.noNodes, \"noEdges\": this.state.noEdges, \"edgeArray\": this.state.edgeArray };\r\n        const detailsFile = { \"noNodes\": this.state.noNodesFile, \"noEdges\": this.state.noEdgesFile, \"edgeArray\": this.state.edgeArrayFile };\r\n        const detailsRand = { \"noNodes\": this.state.noNodesGr, \"noEdges\": this.state.noEdgesGr, \"maxWeight\": this.state.weight };\r\n        const screenHeight = window.screen.height + \"px\";\r\n        return (\r\n            < Container style={{ minHeight: screenHeight }} className=\"pt-5\" >\r\n                <Title title={this.title} />\r\n                <Row>\r\n                    <Col lg={{ span: 8, offset: 2 }}>\r\n                        <h2>Find Max Flow</h2>\r\n                        <Form>\r\n                            <fieldset>\r\n                                <Form.Group as={Row}>\r\n                                    <Col >\r\n                                        <Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"By entering the graph information\"\r\n                                            name=\"form-radio-opt\"\r\n                                            id=\"form-radio-opt1\"\r\n                                            value=\"1\"\r\n                                            onChange={this.handleOptionSelected}\r\n                                            defaultChecked\r\n                                        /><Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"By uploading a file\"\r\n                                            name=\"form-radio-opt\"\r\n                                            id=\"form-radio-opt2\"\r\n                                            value=\"2\"\r\n                                            onChange={this.handleOptionSelected}\r\n                                        /><Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"By using a randomly generated graph\"\r\n                                            name=\"form-radio-opt\"\r\n                                            id=\"form-radio-opt3\"\r\n                                            value=\"3\"\r\n                                            onChange={this.handleOptionSelected}\r\n                                        />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </fieldset>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <Row className={graphClass}>\r\n                    <Form>\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Enter Graph Information</h2>\r\n                            <GraphForm getData={this.getDataFromSubForm} />\r\n                            {rows}\r\n                            <Form.Group as={Row}>\r\n                                <Col>\r\n                                    <Link to={{\r\n                                        pathname: \"/results\",\r\n                                        state: {\r\n                                            details: detailsInfo,\r\n                                            option: 1\r\n                                        }\r\n                                    }}><Button className=\"form-submit-btn\" disabled={infoDis}>Find Max Flow</Button></Link>\r\n                                </Col>\r\n                                <Col md={7} className=\"px-md-5\">\r\n                                    <Button variant=\"secondary\" className=\"form-clear-btn px-5\" type=\"reset\" onClick={this.clearForm} >Clear</Button>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                    </Form>\r\n                </Row>\r\n                <Row className={fileClass}>\r\n                    <Form>\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Upload<Button onClick={this.openModal} className=\"upld-file-format\"><h2><u>File</u></h2></Button>\r\n                                <CustomModal\r\n                                    show={showModal}\r\n                                    onHide={this.setShowModal}\r\n                                />\r\n                                  with graph information</h2>\r\n                            <Form.Group >\r\n                                <Form.File className={uploadBtnClass} id=\"form-upload-file\" custom>\r\n                                    <Form.File.Input className=\"col-md-4\" onChange={e =>\r\n                                        this.validateFile(e.target.files[0])} accept=\".txt\" />\r\n                                    <Form.File.Label className=\"col-md-4\" data-browse=\"Upload File\">\r\n                                        flow.txt\r\n                                    </Form.File.Label>\r\n                                </Form.File>\r\n                                <Form.Control.Feedback type=\"invalid\" className={txtFileClass}>\r\n                                    {txtFileClassFeedBack}\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Form.Group className={uploadingBtnClass}>\r\n                                <Button variant=\"primary\" disabled>\r\n                                    <Spinner\r\n                                        as=\"span\"\r\n                                        animation=\"grow\"\r\n                                        size=\"sm\"\r\n                                        role=\"status\"\r\n                                        aria-hidden=\"true\"\r\n                                    />\r\n                                        Uploading...\r\n                                </Button>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row}>\r\n                                <Col className={fileMaxFlowBtnClass}>\r\n                                    <Link to={{\r\n                                        pathname: \"/results\",\r\n                                        state: {\r\n                                            details: detailsFile,\r\n                                            option: 2\r\n                                        }\r\n                                    }}><Button className=\"form-submit-btn\" disabled={fileDis}>Find Max Flow</Button></Link>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                    </Form>\r\n                </Row>\r\n                <Row className={randomClass}>\r\n                    <Form>\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Enter information of graph to be generated </h2>\r\n                            <GraphForm getData={this.getDataFromRand} />\r\n                            <Form.Group as={Row} controlId={\"form-max-weight\"}>\r\n                                <Form.Label column md={4} >Max Weight of an Edge</Form.Label>\r\n                                <Col md={4} >\r\n                                    <Form.Control onChange={this.validateMaxWeight}/>\r\n                                    <Form.Control.Feedback type=\"invalid\" className={weightClass}>\r\n                                        {weightFeedback}\r\n                                    </Form.Control.Feedback>\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row}>\r\n                                <Col>\r\n                                    <Link to={{\r\n                                        pathname: \"/results\",\r\n                                        state: {\r\n                                            details: detailsRand,\r\n                                            option: 3\r\n                                        }\r\n                                    }}><Button className=\"form-submit-btn\" disabled={graphDis}>Find Max Flow</Button></Link>\r\n                                </Col>\r\n                                <Col md={7} className=\"px-md-5\">\r\n                                    <Button variant=\"secondary\" className=\"form-clear-btn px-5\" type=\"reset\" onClick={this.clearForm} >Clear</Button>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                    </Form>\r\n                </Row>\r\n            </Container >\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Container, Col, Row } from 'react-bootstrap'\r\nimport '../external-stylesheet.css'\r\nimport Title from '../components/title'\r\nexport default class Error extends Component {\r\n    title = \"Error | MX flow\";\r\n    render() {\r\n        const { message } = this.props;\r\n        const screenHeight = window.screen.height + \"px\";\r\n        return (\r\n            <Container style={{ minHeight: screenHeight }}  className=\"pt-5\">\r\n                <Title title={this.title} />\r\n                <Row>\r\n                    <Col lg={{ span: 8, offset: 2 }}>\r\n                        <img\r\n                            alt=\"Error Logo\"\r\n                            src=\"./images/oops-real.png\"\r\n                            className=\"img-fluid\"\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col lg={{ span: 8, offset: 2 }} className='text-center mt-5'><h2>{message || \"404 Page Not Found\"}</h2></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col lg={{ span: 8, offset: 2 }} className='text-center mt-2'><h3>Go back to the home <a href=\"/\">page</a></h3></Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Spinner, Col } from 'react-bootstrap'\r\nimport '../external-stylesheet.css'\r\nimport Title from '../components/title'\r\nexport default class Loading extends Component {\r\n    title = \"Loading | MX flow\"\r\n    render() {\r\n        const screenHeight = window.screen.height + \"px\";\r\n        return (\r\n            <div style={{ minHeight: screenHeight }} className=\"center-div text-center\">\r\n                <Title title={this.title} />\r\n                <Col lg={{ span: 8, offset: 2 }}>\r\n                    <Spinner animation=\"border\" className=\"loading-spinner\" />\r\n\r\n                    <h2 className=\"pt-5\">Loading...</h2>\r\n                </Col>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport CytoscapeComponent from 'react-cytoscapejs'\r\nexport default class Graph extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            elements: props.elements,\r\n            style: props.style,\r\n            stylesheet: [\r\n                {\r\n                    selector: 'node',\r\n                    style: {\r\n                        width: 50,\r\n                        height: 50,\r\n                        shape: 'circle',\r\n                        label: 'data(label)',\r\n                        'text-valign': 'center',\r\n                        'background-color': '#8ad6f2'\r\n\r\n                    }\r\n                },\r\n                {\r\n                    selector: 'edge',\r\n                    style: {\r\n                        'width': 3,\r\n                        label: 'data(label)',\r\n                        'line-color': '#ccc',\r\n                        'target-arrow-color': '#ccc',\r\n                        'target-arrow-shape': 'triangle',\r\n                        'curve-style': 'bezier'\r\n                    }\r\n                }\r\n            ],\r\n            minZoom: 0.5,\r\n            maxZoom: 1.5\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CytoscapeComponent\r\n                    elements={this.state.elements}\r\n                    style={this.state.style}\r\n                    stylesheet={this.state.stylesheet}\r\n                    minZoom={this.state.minZoom}\r\n                    maxZoom={this.state.maxZoon}\r\n                    cy={(cy) => { this.cy = cy }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Container, Col, Row, Button } from 'react-bootstrap'\r\nimport '../external-stylesheet.css'\r\nimport Title from '../components/title'\r\nimport Error from './404'\r\nimport Loading from './loading'\r\nimport Graph from '../components/graph-template'\r\nexport default class Results extends Component {\r\n    title = \"Results | MX flow\"\r\n    urlString = \"\";\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: { message: \"\" },\r\n            isLoaded: false,\r\n            inputElements: [],\r\n            residualElements: [],\r\n            resultElements: [],\r\n            flowBreakDown: [],\r\n            maxFlow: 0,\r\n            style: {},\r\n            noNodes: 0,\r\n            noEdges: 0,\r\n            originalGraph: []\r\n        };\r\n        var option = 4;\r\n        if (this.props.location.state != null) {\r\n            option = this.props.location.state.option;\r\n            var details = this.props.location.state.details;\r\n        }\r\n        if (option != null && (option === 1 || option === 2)) {\r\n            this.urlString = \"http://localhost:5000/api/maxflow\";\r\n            this.getResults(this.urlString, details);\r\n        } else if (option != null && option === 3) {\r\n            this.urlString = \"http://localhost:5000/api/random\";\r\n            this.getResults(this.urlString, details);\r\n        } else {\r\n            const errorMessage = \"Input graph not provided\";\r\n            this.state.error = { message: errorMessage };\r\n            this.state.isLoaded = true;\r\n        }\r\n        this.handleResultsSuccess = this.handleResultsSuccess.bind(this);\r\n        this.downloadtxt = this.downloadtxt.bind(this);\r\n\r\n    }\r\n\r\n    getResults(urlString, details) {\r\n        fetch(urlString, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(details),\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n        })\r\n            .then((res) => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.handleResultsSuccess(result);\r\n                },\r\n                (error) => {\r\n                    this.setState({ error });\r\n                }\r\n            );\r\n    }\r\n    //Checks if the results have been fetched\r\n    handleResultsSuccess(result) {\r\n        if (result && result.sent) {\r\n            var noNodes = result.sink + 1;\r\n            var noEdges = result.edges;\r\n            var inputElements = [];\r\n            var residualElements = [];\r\n            var resultElements = [];\r\n            var nodesPerRow = Math.ceil(Math.sqrt(noNodes));\r\n            var maxWidth = nodesPerRow * 100;\r\n            var xpos = 50;\r\n            var ypos = -50;\r\n            for (let index = 0; index < noNodes; index++) {\r\n                if ((index % nodesPerRow) === 0) {\r\n                    ypos += 100;\r\n                    xpos = 50\r\n                } else {\r\n                    xpos += 100\r\n                }\r\n                var name = index;\r\n                if (index === 0) {\r\n                    name = \"source\";\r\n                } else if (index === noNodes - 1) {\r\n                    name = \"sink\"\r\n                }\r\n                var data = { \"data\": { \"id\": name, \"label\": name }, \"position\": { \"x\": xpos, \"y\": ypos } };\r\n                inputElements.push(data);\r\n                residualElements.push(data);\r\n                resultElements.push(data);\r\n            }\r\n            for (let index = 0; index < result.original.length; index++) {\r\n                var array = result.original[index];\r\n                for (let index = 0; index < array.length; index++) {\r\n                    var edge = array[index];\r\n                    var sourceName = edge.start;\r\n                    if (edge.start === 0) {\r\n                        sourceName = \"source\";\r\n                    }\r\n                    var sinkName = edge.end;\r\n                    if (edge.end === noNodes - 1) {\r\n                        sinkName = \"sink\"\r\n                    }\r\n                    data = { \"data\": { \"source\": sourceName, \"target\": sinkName, \"label\": edge.weight } }\r\n                    inputElements.push(data);\r\n                }\r\n            }\r\n            for (let index = 0; index < result.residual.length; index++) {\r\n                array = result.residual[index];\r\n                for (let index = 0; index < array.length; index++) {\r\n                    edge = array[index];\r\n                    sourceName = edge.start;\r\n                    if (edge.start === 0) {\r\n                        sourceName = \"source\";\r\n                    } else if (edge.start === noNodes - 1) {\r\n                        sourceName = \"sink\";\r\n                    }\r\n                    sinkName = edge.end;\r\n                    if (edge.end === noNodes - 1) {\r\n                        sinkName = \"sink\"\r\n                    } else if (edge.end === 0) {\r\n                        sinkName = \"source\";\r\n                    }\r\n                    data = { \"data\": { \"source\": sourceName, \"target\": sinkName, \"label\": edge.weight } }\r\n                    residualElements.push(data);\r\n                }\r\n            }\r\n            for (let index = 0; index < result.result.length; index++) {\r\n                array = result.result[index];\r\n                for (let index = 0; index < array.length; index++) {\r\n                    edge = array[index];\r\n                    sourceName = edge.start;\r\n                    if (edge.start === 0) {\r\n                        sourceName = \"source\";\r\n                    }\r\n                    sinkName = edge.end;\r\n                    if (edge.end === noNodes - 1) {\r\n                        sinkName = \"sink\"\r\n                    }\r\n                    data = { \"data\": { \"source\": sourceName, \"target\": sinkName, \"label\": edge.weight } }\r\n                    resultElements.push(data);\r\n                }\r\n            }\r\n            var width = maxWidth;\r\n            if (maxWidth < 500) {\r\n                width = 500;\r\n            }\r\n            var breakDownFlow = [];\r\n            for (let index = 0; index < result.breakDownOfFlow.length; index++) {\r\n                const outerList = result.breakDownOfFlow[index];\r\n                var indexOfSource = outerList.indexOf(0);\r\n                var row = \"\";\r\n                for (let i = indexOfSource; i >= 0; i--) {\r\n                    row += outerList[i];\r\n                    if (i === 0) {\r\n                        row += \" = \";\r\n                    } else {\r\n                        row += \" –> \";\r\n                    }\r\n                }\r\n                row += outerList[(outerList.length - 1)];\r\n                breakDownFlow.push(row);\r\n            }\r\n            this.setState({ noNodes, noEdges, inputElements, residualElements, resultElements, flowBreakDown: breakDownFlow, maxFlow: result.maxFlow, isLoaded: true, style: { \"border\": \"1px solid black\", \"width\": width, \"height\": maxWidth }, originalGraph: result.original });\r\n        } else {\r\n            this.setState({ noEdges: 0, noNodes: 0, inputElements: [], residualElements: [], resultElements: [], flowBreakDown: [], maxFlow: 0, isLoaded: true, error: { message: result.message }, originalGraph: [] });\r\n        }\r\n    }\r\n\r\n    downloadtxt() {\r\n        var graph = this.state.originalGraph;\r\n        var noNodes = this.state.noNodes;\r\n        var noEdges = this.state.noEdges;\r\n        var txtContent = noNodes + \"\\n\" + noEdges + \"\";\r\n        for (let index = 0; index < graph.length; index++) {\r\n            var array = graph[index];\r\n            for (let index1 = 0; index1 < array.length; index1++) {\r\n                var edge = array[index1];\r\n                var row = \"\\n\" + edge.start + \" \" + edge.weight + \" \" + edge.end;\r\n                txtContent += row;\r\n            }\r\n        }\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([txtContent], { type: 'text/plain' });\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = \"Graph.txt\";\r\n        element.click();\r\n    }\r\n    render() {\r\n        const { error, isLoaded, inputElements, residualElements, resultElements, flowBreakDown, maxFlow, style } = this.state;\r\n        const screenHeight = window.screen.height + \"px\";\r\n        if (error && error.message !== \"\") {\r\n            return <Error message={error.message} />\r\n        } else if (!isLoaded) {\r\n            return <Loading />\r\n        } else {\r\n            return (\r\n                <Container style={{ minHeight: screenHeight }}  className=\"container-results\" md={10}>\r\n                    <Title title={this.title} />\r\n                    <Row className=\"pt-5\">\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h4>The maximum flow for the below graph is <b>{maxFlow}</b></h4>\r\n                            <h4>Source - 0</h4>\r\n                            <h4>Sink - {this.state.noNodes}</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row >\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Input Graph</h2>\r\n                            <Graph elements={inputElements} style={style} />\r\n                            <Button className=\"mt-3\" onClick={this.downloadtxt} >Download Input Graph as a txt file</Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"pt-5\">\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Result Graph</h2>\r\n                            <Graph elements={resultElements} style={style} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"pt-5\">\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Residual Graph</h2>\r\n                            <Graph elements={residualElements} style={style} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"pt-5 pb-5\">\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Break Down of flow</h2>\r\n\r\n                            {flowBreakDown && flowBreakDown.map((item, index) => (\r\n                                <p><b>{index + 1}.</b>&nbsp;{item}</p>\r\n                            ))}\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Container>\r\n            );\r\n        }\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport './footer.css'\r\nexport default class Footer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"footer-content text-center\">\r\n                <div className=\"p-2\">© 2020 Copyright:&nbsp;\r\n                <a className=\"footer-link\" href=\"https://www.linkedin.com/in/safiyyah-r-408652132/\">Safiyyah Thur Rahman</a>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './scroll-to-top.css'\r\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class ScrollToTop extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showBtn: false\r\n        }\r\n        this.scrollToTop = this.scrollToTop.bind(this);\r\n        this.checkIfScrolled = this.checkIfScrolled.bind(this);\r\n    }\r\n    scrollToTop() {\r\n        window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    }\r\n    checkIfScrolled() {\r\n        var showBtn = this.state.showBtn;\r\n        if (!this.state.showBtn && window.pageYOffset > window.screenY) {\r\n            showBtn = true;\r\n        } else if (this.state.showBtn && window.pageYOffset <= window.screenY) {\r\n            showBtn = false;\r\n        }\r\n        this.setState({ showBtn });\r\n    }\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.checkIfScrolled);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.checkIfScrolled);\r\n    }\r\n\r\n    render() {\r\n        const { showBtn } = this.state;\r\n        return (\r\n            <div className=\"custom-div-scroll-top\">\r\n                <Button className=\"custom-btn-scroll-top\" type=\"button\" onClick={this.scrollToTop} style={{ display: showBtn ? 'flex' : 'none' }}>\r\n                    <FontAwesomeIcon className=\"custom-scroll-top\" icon={faArrowUp} />\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport { Nav, NavItem, Navbar } from \"react-bootstrap\";\r\nimport { NavLink } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faCalculator, faHome } from '@fortawesome/free-solid-svg-icons'\r\nimport './navbar.css'\r\nexport default class NavBar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Navbar expand=\"lg\" className=\"navbar-background shadow\" sticky=\"top\">\r\n                <Navbar.Brand href=\"/\" className=\" ml-2\">\r\n                    <img\r\n                        alt=\"Website logo\"\r\n                        src=\"./images/logo.png\"\r\n                        width=\"auto\"\r\n                        height=\"40\"\r\n                        className=\"d-inline-block align-top\"\r\n                    />\r\n                    <span className=\"navbar-title\">\r\n                        <span id=\"navbar-span-mx\">MX&nbsp;</span>\r\n                        <span id=\"navbar-span-flow\">flow</span>\r\n                    </span>\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"navbar-responsive\" className=\"mr-2\" />\r\n                <Navbar.Collapse id=\"navbar-responsive\">\r\n                    <Nav className=\"align-items-center justify-content-end navbar-custom-collapse\">\r\n                        <NavLink className=\"custom-link\" to=\"/\" exact=\"true\" activeClassName=\"active\">\r\n                            <NavItem className=\"p-3 custom-nav-item text-center\" ><FontAwesomeIcon className=\"custom-link-icon\" icon={faHome} />Home</NavItem>\r\n                        </NavLink>\r\n                        <NavLink className=\"custom-link\" to=\"/maxflow\" activeClassName=\"active\">\r\n                            <NavItem className=\"p-3 custom-nav-item text-center\" ><FontAwesomeIcon className=\"custom-link-icon\" icon={faCalculator} />Find Max Flow</NavItem>\r\n                        </NavLink>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport Home from './pages/index';\nimport MaxFlow from './pages/maxflow';\nimport Results from './pages/results';\nimport Error from './pages/404';\nimport Footer from './components/footer'\nimport ScrollToTop from './components/scroll-to-top'\nimport NavBar from './components/navbar';\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <NavBar />\n          <ScrollToTop />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/maxflow\" component={MaxFlow} />\n            <Route path=\"/results\" component={Results} />\n            <Route component={Error} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>);\n  }\n\n\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}