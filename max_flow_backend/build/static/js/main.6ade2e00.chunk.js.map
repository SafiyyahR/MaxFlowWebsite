{"version":3,"sources":["components/title.js","pages/index.js","components/graph-form.js","components/custom-modal.js","components/edge-form.js","pages/maxflow.js","pages/404.js","pages/loading.js","components/graph-template.js","pages/results.js","components/footer.js","components/scroll-to-top.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","title","state","this","Helmet","meta","name","content","link","Component","Home","screenHeight","window","screen","height","Container","style","minHeight","className","Row","Col","lg","span","offset","alt","src","href","target","without","rel","GraphForm","noNodes","noNodesClass","noNodesFeedback","noEdges","noEdgesClass","noEdgesFeedback","validateNoEdges","bind","validateNoNodes","sendDataToParent","getData","event","value","parseInt","setState","maxNoOfEdges","Form","Group","as","controlId","Label","column","md","Control","onChange","Feedback","type","CustomModal","closeModal","onHide","Modal","show","size","aria-labelledby","centered","Header","closeButton","Body","Footer","Button","variant","onClick","EdgeForm","index","nodes","startNodeClass","startNodeFeedback","startNode","endNodeClass","endNodeFeedback","endNode","weightClass","weightFeedback","weight","validateStartNode","validateWeight","validateEndNode","MaxFlow","handleFile","e","details","result","split","nodeEdgesFileValid","edgeArrayFile","edgeArrayFileValid","txtFileClassFeedBack","txtFileClass","length","edge","edgeValid","validEdge","index1","push","uploadBtnClass","uploadingBtnClass","showModal","graphClass","fileClass","randomClass","nodeEdgesValid","edgeArray","edgeArrayValid","nodeEdgesGrValid","noEdgesGr","noNodesGr","maxWeightValid","txtFileChosen","noEdgesFile","noNodesFile","handleOptionSelected","validateMaxWeight","getDataFromSubForm","getDataFromEdges","getDataFromRand","validateFile","setShowModal","openModal","clearForm","data","valid","file","fileData","FileReader","onloadend","readAsText","list","newList","isValid","choice","fileMaxFlowBtnClass","infoDis","fileDis","graphDis","rows","key","detailsInfo","detailsFile","detailsRand","Check","label","id","defaultChecked","to","pathname","option","disabled","File","custom","Input","files","accept","data-browse","Spinner","animation","role","aria-hidden","Error","message","Loading","Graph","elements","stylesheet","selector","width","shape","minZoom","maxZoom","maxZoon","cy","Results","urlString","error","isLoaded","inputElements","residualElements","resultElements","flowBreakDown","maxFlow","originalGraph","location","console","log","getResults","handleResultsSuccess","downloadtxt","fetch","method","body","JSON","stringify","headers","then","res","json","sent","sink","edges","nodesPerRow","Math","ceil","sqrt","maxWidth","xpos","ypos","original","array","sourceName","start","sinkName","end","residual","breakDownFlow","breakDownOfFlow","outerList","row","i","indexOf","graph","txtContent","element","document","createElement","Blob","URL","createObjectURL","download","click","map","item","ScrollToTop","showBtn","scrollToTop","checkIfScrolled","scrollTo","top","behavior","pageYOffset","screenY","addEventListener","removeEventListener","display","icon","faArrowUp","NavBar","Navbar","expand","sticky","Brand","Toggle","aria-controls","Collapse","Nav","exact","activeClassName","NavItem","faHome","faCalculator","App","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6ade2e00.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Helmet } from 'react-helmet'\r\nexport default class Title extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        var title = this.props.title;\r\n        if (title == null) {\r\n            title = \"Error | OCS CMB\";\r\n        }\r\n        this.state = {\r\n            title: title\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { title } = this.state;\r\n        return (\r\n            <Helmet\r\n                title={title}\r\n                meta={[\r\n                    { name: \"author\", content: \"Safiyyah Thur Rahman\" },\r\n                    { name: \"og:site_name\", content: \"MX flow\" },\r\n                    { name: \"keywords\", content: \"Mx flow, Max Flow, Randomly generated flow network, Find Max Flow, Find Maximum Flow, File, Safiyyah Thur Rahman\" }\r\n                ]}\r\n                link={[\r\n                    {\r\n                        \"rel\": \"icon\",\r\n                        \"type\": \"image/png\",\r\n                        \"href\": \"./images/logo.png\",\r\n                        \"sizes\": \"16x16\"\r\n                    }\r\n                ]}\r\n            />\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Container, Col, Row } from 'react-bootstrap'\r\nimport '../external-stylesheet.css'\r\nimport Title from '../components/title'\r\nexport default class Home extends Component {\r\n    title = \"Home | MX flow\";\r\n    render() {\r\n        const screenHeight = window.screen.height + \"px\";\r\n        return (\r\n            <Container style={{ minHeight: screenHeight }} className=\"py-5\">\r\n                <Title title={this.title} />\r\n                <Row>\r\n                    <Col lg={{ span: 8, offset: 2 }}>\r\n                        <h2>What is Max Flow?</h2>\r\n                        <p>The maximum quantity of flow that passes from the source to the sink of a graph.</p>\r\n                        <p>\r\n                            The below picture is an example of a network. Here, there are two nodes labelled as source and sink.\r\n                            The source node is where the flow begins and the sink node is where flow ends.\r\n                            Each node is connected is connected to at least another node by a line called edge.\r\n                            Each edge has a maximum capacity of flow it can send through.\r\n                            In The input graph, the source must not have any incoming edges and the sink must not have any outgoing edges.\r\n                        </p>\r\n                        <img\r\n                            alt=\"Input Graph\"\r\n                            src=\"./images/inputGraph.png\"\r\n                            className=\"mx-auto d-block\"\r\n                        />\r\n                        <br />\r\n                        <p>\r\n                            The max flow for the above graph is <b>9</b>.\r\n                            The max flow is calculated using the method described below.\r\n                            For each node the input flow and output flow are equal, except for the source and sink node.\r\n                        </p>\r\n                        <img\r\n                            alt=\"Result Graph and Max Flow\"\r\n                            src=\"./images/resultGraph.png\"\r\n                            className=\"mx-auto d-block\"\r\n                        />\r\n                        <br />\r\n                        <h2>Pseudo code</h2>\r\n                        <h3>Calculate Max Flow - Pseudocode</h3>\r\n                        <Row>\r\n                            <ol className=\"pseudocode\">\r\n                                <li><b>.</b> &nbsp;SET max_flow TO 0</li>\r\n                                <li><b>.</b> &nbsp;WHILE path FROM source to sink exists (use BFS or DFS)</li>\r\n                                <ol>\r\n                                    <li><b>.</b> &nbsp;FIND minimum flow in path FOUND</li>\r\n                                    <li><b>.</b> &nbsp;ADD minimum flow to max_flow</li>\r\n                                </ol>\r\n                                <li><b>.</b> &nbsp;RETURN max_flow</li>\r\n                            </ol>\r\n                        </Row>\r\n                        <h2>Other Resource</h2>\r\n                        <p><a href=\"https://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/\" target=\"_blank\"\r\n                            without=\"true\"\r\n                            rel=\"noopener noreferrer\">The implementation of the Ford-Fulkerson Algorithm</a></p>\r\n                        <p><a href=\"https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/\" target=\"_blank\"\r\n                            without=\"true\"\r\n                            rel=\"noopener noreferrer\">Depth First Search - Introduction & Implementation</a></p>\r\n                        <p><a href=\"https://www.geeksforgeeks.org/depth-first-search-or-dfs-for-a-graph/\" target=\"_blank\"\r\n                            without=\"true\"\r\n                            rel=\"noopener noreferrer\">Breadth First Search - Introduction & Implementation</a></p>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Col, Row, Form, Container } from 'react-bootstrap'\r\nexport default class GraphForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            noNodes: 0,\r\n            noNodesClass: \"hide\",\r\n            noNodesFeedback: \"Please enter an integer.\",\r\n            noEdges: 0,\r\n            noEdgesClass: \"hide\",\r\n            noEdgesFeedback: \"Please enter an integer.\",\r\n        }\r\n        this.validateNoEdges = this.validateNoEdges.bind(this);\r\n        this.validateNoNodes = this.validateNoNodes.bind(this);\r\n        this.sendDataToParent = this.sendDataToParent.bind(this);\r\n    }\r\n\r\n    sendDataToParent() {\r\n        if (this.state.noNodes !== 0 && this.state.noEdges !== 0) {\r\n            return this.props.getData({ \"noNodes\": this.state.noNodes, \"noEdges\": this.state.noEdges, \"valid\": true });\r\n        } else {\r\n            return this.props.getData({ \"valid\": false });\r\n        }\r\n    }\r\n    validateNoNodes(event) {\r\n        var noNodes = event.target.value;\r\n        var noNodesFeedback = \"\";\r\n        var noNodesClass = \"hide\";\r\n        if (noNodes != parseInt(noNodes)) {\r\n            noNodesFeedback = \"Please enter an integer.\";\r\n            noNodesClass = \"show\";\r\n            noNodes = 0\r\n        } else if (noNodes > 3 && noNodes <= 100) {\r\n            noNodesClass = \"hide\";\r\n            noNodesFeedback = \"\";\r\n            noNodes = parseInt(noNodes);\r\n        } else if (noNodes <= 3) {\r\n            noNodesFeedback = \"Please enter an integer greater than 3.\"\r\n            noNodesClass = \"show\";\r\n            noNodes = 0\r\n        } else if (noNodes > 100) {\r\n            noNodesFeedback = \"Please enter an integer lesser than 100.\";\r\n            noNodesClass = \"show\";\r\n            noNodes = 0;\r\n        }\r\n        this.setState({ noNodesFeedback, noNodesClass, noNodes }, () => {\r\n            this.validateNoEdges(\"\");\r\n            this.sendDataToParent()\r\n        });\r\n\r\n    }\r\n\r\n    validateNoEdges(event) {\r\n        var noEdges = 0\r\n        if (event != \"\") {\r\n            noEdges = event.target.value;\r\n        }\r\n        else {\r\n            noEdges = this.state.noEdges;\r\n        }\r\n        var noNodes = this.state.noNodes;\r\n        var maxNoOfEdges = (noNodes * noNodes) - (3 * noNodes) + 2;\r\n        var noEdgesFeedback = \"\";\r\n        var noEdgesClass = \"hide\";\r\n        if (noEdges != parseInt(noEdges)) {\r\n            noEdgesFeedback = \"Please enter an integer.\";\r\n            noEdgesClass = \"show\";\r\n            noEdges = 0;\r\n        } else if (noNodes === 0) {\r\n            noEdgesFeedback = \"Please enter an integer for the number of nodes first.\";\r\n            noEdgesClass = \"show\";\r\n            noEdges = 0;\r\n        } else if (noEdges < noNodes) {\r\n            noEdgesFeedback = \"Please enter an integer that is greater than \" + (noNodes - 1) + \".\";\r\n            noEdgesClass = \"show\";\r\n            noEdges = 0;\r\n        } else if (noEdges >= noNodes && noEdges <= maxNoOfEdges) {\r\n            noEdgesFeedback = \"\";\r\n            noEdgesClass = \"hide\";\r\n            noEdges = parseInt(noEdges);\r\n        } else if (noEdges > maxNoOfEdges) {\r\n            noEdgesFeedback = \"Please enter an integer less than \" + maxNoOfEdges;\r\n            noEdgesClass = \"show\";\r\n            noEdges = 0;\r\n        }\r\n        this.setState({ noEdges, noEdgesClass, noEdgesFeedback }, () => {\r\n            this.sendDataToParent();\r\n        });\r\n\r\n    }\r\n    render() {\r\n        const { noEdgesClass, noNodesClass, noEdgesFeedback, noNodesFeedback } = this.state;\r\n        return (\r\n            <Container className=\"p-0 m-0\">\r\n                <Form.Group as={Row} controlId=\"form-no-nodes\">\r\n                    <Form.Label column md={4}>Number of Nodes in Graph</Form.Label>\r\n                    <Col md={4}>\r\n                        <Form.Control onChange={this.validateNoNodes} />\r\n                        <Form.Control.Feedback type=\"invalid\" className={noNodesClass}>\r\n                            {noNodesFeedback}\r\n                        </Form.Control.Feedback></Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"form-no-edges\">\r\n                    <Form.Label column md={4}>Number of Edges in Graph</Form.Label>\r\n                    <Col md={4}>\r\n                        <Form.Control onChange={this.validateNoEdges} />\r\n                        <Form.Control.Feedback type=\"invalid\" className={noEdgesClass}>\r\n                            {noEdgesFeedback}\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                </Form.Group>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Col, Row, Button, Modal } from 'react-bootstrap'\r\nexport default class CustomModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.closeModal = this.closeModal.bind(this);\r\n    }\r\n\r\n    closeModal() {\r\n        this.props.onHide(false);\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal show={this.props.show} onHide={this.closeModal} size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        <h3>File Format</h3>\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Row>\r\n                        <Col lg={{ span: 10, offset: 2 }}>\r\n                            <img src=\"./images/fileFormat.png\" className=\"img-fluid\" alt=\"file format to be uploaded\" />\r\n                        </Col>\r\n                    </Row>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={this.closeModal}>\r\n                        Close\r\n            </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Col, Row, Form } from 'react-bootstrap'\r\nexport default class EdgeForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const index = props.index;\r\n        const noNodes = props.nodes;\r\n        this.state = {\r\n            index: index,\r\n            noNodes: noNodes,\r\n            startNodeClass: \"hide\",\r\n            startNodeFeedback: \"\",\r\n            startNode: -1,\r\n            endNodeClass: \"hide\",\r\n            endNodeFeedback: \"\",\r\n            endNode: -1,\r\n            weightClass: \"hide\",\r\n            weightFeedback: \"\",\r\n            weight: 0\r\n        }\r\n        this.validateStartNode = this.validateStartNode.bind(this);\r\n        this.validateWeight = this.validateWeight.bind(this);\r\n        this.validateEndNode = this.validateEndNode.bind(this);\r\n        this.sendDataToParent = this.sendDataToParent.bind(this);\r\n    }\r\n\r\n    sendDataToParent() {\r\n        if (this.state.endNode !== -1 && this.state.startNode !== -1 && this.state.weight !== 0) {\r\n            return this.props.getData({ \"index\": this.state.index, \"edge\": [this.state.startNode, this.state.weight, this.state.endNode], \"valid\": true });\r\n        } else {\r\n            return this.props.getData({ \"index\": this.state.index, \"valid\": false });\r\n        }\r\n    }\r\n\r\n    validateEndNode(event) {\r\n        var endNode = event.target.value;\r\n        var endNodeClass = \"hide\";\r\n        var endNodeFeedback = \"\";\r\n        if (endNode != parseInt(endNode)) {\r\n            endNodeFeedback = \"Please enter an integer\";\r\n            endNodeClass = \"show\";\r\n            endNode = -1;\r\n        } else if (endNode == 0) {\r\n            endNodeFeedback = \"Node 0 cannot be an end node.\";\r\n            endNodeClass = \"show\";\r\n            endNode = -1;\r\n        } else if (endNode < 0 || endNode >= this.state.noNodes) {\r\n            endNodeFeedback = \"Node \" + endNode + \" is not in the graph.\";\r\n            endNodeClass = \"show\";\r\n            endNode = -1;\r\n        } else if (endNode == this.state.startNode) {\r\n            endNodeFeedback = \"Start node and end node cannot be the same.\";\r\n            endNodeClass = \"show\";\r\n            endNode = -1;\r\n        } else if (endNode > 0 && endNode <= this.state.noNodes - 1) {\r\n            endNodeFeedback = \"\";\r\n            endNodeClass = \"hide\";\r\n            endNode = parseInt(endNode);\r\n        }\r\n        this.setState({ endNodeFeedback, endNodeClass, endNode }, () => {\r\n            this.sendDataToParent();\r\n        });\r\n    }\r\n\r\n    validateWeight(event) {\r\n        var weight = event.target.value;\r\n        var weightClass = \"hide\";\r\n        var weightFeedback = 0;\r\n        if (weight != parseInt(weight)) {\r\n            weightFeedback = \"Please enter an integer.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else if (weight <= 0) {\r\n            weightFeedback = \"Weight of an edge must be greater than zero.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else if (weight > 2147483647) {\r\n            weightFeedback = \"Weight of an edge must be lesser than 2147483647.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else {\r\n            weightFeedback = \"\";\r\n            weightClass = \"hide\";\r\n            weight = parseInt(weight);\r\n        }\r\n        this.setState({ weight, weightClass, weightFeedback }, () => {\r\n            this.sendDataToParent();\r\n        })\r\n    }\r\n    validateStartNode(event) {\r\n        var startNode = event.target.value;\r\n        var startNodeClass = \"hide\";\r\n        var startNodeFeedback = \"-1\";\r\n        if (startNode != parseInt(startNode)) {\r\n            startNodeFeedback = \"Please enter an integer.\";\r\n            startNodeClass = \"show\";\r\n            startNode = -1;\r\n        } else if (startNode == this.state.noNodes - 1) {\r\n            startNodeFeedback = \"Node \" + (this.state.noNodes - 1) + \" cannot be an start node.\";\r\n            startNodeClass = \"show\";\r\n            startNode = -1;\r\n        } else if (startNode < 0 || startNode >= this.state.noNodes) {\r\n            startNodeFeedback = \"Node \" + startNode + \" is not in the graph.\";\r\n            startNodeClass = \"show\";\r\n            startNode = -1;\r\n        } else if (startNode == this.state.endNode) {\r\n            startNodeFeedback = \"Start node and end node cannot be the same.\";\r\n            startNodeClass = \"show\";\r\n            startNode = -1;\r\n        } else if (startNode >= 0 && startNode < this.state.noNodes - 1) {\r\n            startNodeFeedback = \"\";\r\n            startNodeClass = \"hide\";\r\n            startNode = parseInt(startNode);\r\n        }\r\n        this.setState({ startNodeFeedback, startNodeClass, startNode }, () => {\r\n            this.sendDataToParent();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { index, startNodeClass, startNodeFeedback, endNodeClass, endNodeFeedback, weightClass, weightFeedback } = this.state;\r\n        return (\r\n            <Row >\r\n                <Form.Group controlId={\"form-start-node\" + index}>\r\n                    <Col className=\"form-label-2\">\r\n                        <Form.Label column >Start Node {index + 1}</Form.Label>\r\n                    </Col>\r\n                    <Col >\r\n                        <Form.Control onChange={this.validateStartNode} />\r\n                        <Form.Control.Feedback type=\"invalid\" className={startNodeClass}>\r\n                            {startNodeFeedback}\r\n                        </Form.Control.Feedback>\r\n                    </Col >\r\n                </Form.Group>\r\n                <Form.Group controlId={\"form-weight-edge\" + index}>\r\n                    <Col className=\"form-label-2\">\r\n                        <Form.Label column >Weight {index + 1}</Form.Label>\r\n                    </Col>\r\n                    <Col >\r\n                        <Form.Control onChange={this.validateWeight} />\r\n                        <Form.Control.Feedback type=\"invalid\" className={weightClass}>\r\n                            {weightFeedback}\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                </Form.Group>\r\n                <Form.Group controlId={\"form-end-node\" + index}>\r\n                    <Col className=\"form-label-2\">\r\n                        <Form.Label column  >End Node {index + 1}</Form.Label>\r\n                    </Col>\r\n                    <Col >\r\n                        <Form.Control onChange={this.validateEndNode} />\r\n                        <Form.Control.Feedback type=\"invalid\" className={endNodeClass}>\r\n                            {endNodeFeedback}\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                </Form.Group>\r\n            </Row>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Container, Col, Row, Button, Spinner, Form } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom';\r\nimport '../external-stylesheet.css'\r\nimport Title from '../components/title'\r\nimport GraphForm from '../components/graph-form'\r\nimport CustomModal from '../components/custom-modal';\r\nimport EdgeForm from '../components/edge-form'\r\nexport default class MaxFlow extends Component {\r\n    title = \"Find Max Flow | MX flow\"\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            graphClass: \"show\",\r\n            fileClass: \"hide\",\r\n            randomClass: \"hide\",\r\n            uploadingBtnClass: \"hide\",\r\n            uploadBtnClass: \"show\",\r\n            noNodes: 0,\r\n            noEdges: 0,\r\n            nodeEdgesValid: false,\r\n            edgeArray: [],\r\n            edgeArrayValid: false,\r\n            txtFileClass: \"hide\",\r\n            txtFileClassFeedBack: \"Please upload a file with a txt extension.\",\r\n            nodeEdgesGrValid: false,\r\n            noEdgesGr: 0,\r\n            noNodesGr: 0,\r\n            weightClass: \"hide\",\r\n            weightFeedback: \"\",\r\n            weight: 0,\r\n            maxWeightValid: false,\r\n            txtFileChosen: false,\r\n            noEdgesFile: 0,\r\n            noNodesFile: 0,\r\n            nodeEdgesFileValid: false,\r\n            edgeArrayFile: [],\r\n            edgeArrayFileValid: false\r\n\r\n        }\r\n        this.handleOptionSelected = this.handleOptionSelected.bind(this);\r\n        this.validateMaxWeight = this.validateMaxWeight.bind(this);\r\n        this.getDataFromSubForm = this.getDataFromSubForm.bind(this);\r\n        this.getDataFromEdges = this.getDataFromEdges.bind(this);\r\n        this.getDataFromRand = this.getDataFromRand.bind(this);\r\n        this.validateFile = this.validateFile.bind(this);\r\n        this.setShowModal = this.setShowModal.bind(this);\r\n        this.openModal = this.openModal.bind(this);\r\n        this.clearForm = this.clearForm.bind(this);\r\n    }\r\n\r\n    handleOptionSelected(event) {\r\n        var value = event.target.value;\r\n        if (value && value === \"1\") {\r\n            this.setState({ graphClass: \"show\" });\r\n            this.setState({ fileClass: \"hide\" });\r\n            this.setState({ randomClass: \"hide\" });\r\n        } else if (value && value === \"2\") {\r\n            this.setState({ graphClass: \"hide\" });\r\n            this.setState({ fileClass: \"show\" });\r\n            this.setState({ randomClass: \"hide\" });\r\n        } else if (value && value === \"3\") {\r\n            this.setState({ graphClass: \"hide\" });\r\n            this.setState({ fileClass: \"hide\" });\r\n            this.setState({ randomClass: \"show\" });\r\n        }\r\n\r\n    }\r\n\r\n    validateMaxWeight(event) {\r\n        var weight = event.target.value;\r\n        var weightClass = \"hide\";\r\n        var weightFeedback = 0;\r\n        var maxWeightValid = false;\r\n        if (weight != parseInt(weight)) {\r\n            weightFeedback = \"Please enter an integer.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else if (weight <= 0) {\r\n            weightFeedback = \"Weight of an edge must be greater than zero.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else if (weight > 2147483647) {\r\n            weightFeedback = \"Weight of an edge must be lesser than 2147483647.\";\r\n            weightClass = \"show\";\r\n            weight = 0;\r\n        } else {\r\n            weightFeedback = \"\";\r\n            weightClass = \"hide\";\r\n            weight = parseInt(weight);\r\n            maxWeightValid = true;\r\n        }\r\n        this.setState({ weight, weightClass, weightFeedback, maxWeightValid });\r\n    }\r\n    getDataFromRand(data) {\r\n        if (data && data.valid) {\r\n            this.setState({ noEdgesGr: data.noEdges, noNodesGr: data.noNodes, nodeEdgesGrValid: true });\r\n        } else {\r\n            this.setState({ noEdgesGr: 0, noNodesGr: 0 });\r\n        }\r\n    }\r\n\r\n    validateFile(file) {\r\n        this.setState({ uploadBtnClass: \"hide\", uploadingBtnClass: \"show\" }, () => {\r\n            let fileData = new FileReader();\r\n            fileData.onloadend = this.handleFile;\r\n            fileData.readAsText(file);\r\n        });\r\n    }\r\n    handleFile = (e) => {\r\n        const content = e.target.result;\r\n        var details = content.split(\"\\n\");\r\n        var noEdges = 0;\r\n        var noNodes = 0;\r\n        var nodeEdgesFileValid = false;\r\n        var edgeArrayFile = [];\r\n        var edgeArrayFileValid = false;\r\n        var txtFileClassFeedBack = \"Insufficient details provided.\";\r\n        var txtFileClass = \"show\";\r\n        if (details.length > 2) {\r\n            noNodes = details[0];\r\n            if (noNodes != parseInt(noNodes)) {\r\n                txtFileClassFeedBack = \"Please enter an integer for the number of nodes.\";\r\n                txtFileClass = \"show\";\r\n                noNodes = 0\r\n            } else if (noNodes > 3 && noNodes <= 100) {\r\n                txtFileClass = \"hide\";\r\n                txtFileClassFeedBack = \"\";\r\n                noNodes = parseInt(noNodes);\r\n            } else if (noNodes <= 3) {\r\n                txtFileClassFeedBack = \"Please enter an integer greater than 3 for the number of nodes.\"\r\n                txtFileClass = \"show\";\r\n                noNodes = 0\r\n            } else if (noNodes > 100) {\r\n                txtFileClassFeedBack = \"Please enter an integer lesser than 100 for the number of nodes.\";\r\n                txtFileClass = \"show\";\r\n                noNodes = 0;\r\n            }\r\n            if (noNodes !== 0) {\r\n                noEdges = details[1];\r\n                var maxNoOfEdges = (noNodes * noNodes) - (3 * noNodes) + 2;\r\n                txtFileClassFeedBack = \"\";\r\n                txtFileClass = \"hide\";\r\n                if (noEdges != parseInt(noEdges)) {\r\n                    txtFileClassFeedBack = \"Please enter an integer for the number of edges.\";\r\n                    txtFileClass = \"show\";\r\n                    noEdges = 0;\r\n                } else if (noNodes === 0) {\r\n                    txtFileClassFeedBack = \"Please enter an integer for the number of nodes first for the number of edges.\";\r\n                    txtFileClass = \"show\";\r\n                    noEdges = 0;\r\n                } else if (noEdges < noNodes) {\r\n                    txtFileClassFeedBack = \"Please enter an integer that is greater than \" + (noNodes - 1) + \" for the number of edges.\";\r\n                    txtFileClass = \"show\";\r\n                    noEdges = 0;\r\n                } else if (noEdges >= noNodes && noEdges <= maxNoOfEdges) {\r\n                    txtFileClassFeedBack = \"\";\r\n                    txtFileClass = \"hide\";\r\n                    noEdges = parseInt(noEdges);\r\n                } else if (noEdges > maxNoOfEdges) {\r\n                    txtFileClassFeedBack = \"Please enter an integer less than \" + maxNoOfEdges + \" for the number of edges.\";\r\n                    txtFileClass = \"show\";\r\n                    noEdges = 0;\r\n                }\r\n                if (noEdges != 0) {\r\n                    edgeArrayFileValid = true;\r\n                    nodeEdgesFileValid = true;\r\n                    for (let index = 2; index < (noEdges + 2); index++) {\r\n                        const row = details[index];\r\n                        var edge = row.split(\" \");\r\n                        if (edge.length === 3) {\r\n                            var edgeValid = true;\r\n                            var validEdge = [];\r\n                            for (let index1 = 0; index1 < edge.length; index1++) {\r\n                                if (edge[index1] != parseInt(edge[index1])) {\r\n                                    edgeValid = false;\r\n                                    txtFileClass = \"show\";\r\n                                    txtFileClassFeedBack = \"The file must only contain integers.\";\r\n                                    edgeArrayFile = [];\r\n                                    edgeArrayFileValid = false;\r\n                                    break;\r\n                                } else {\r\n                                    validEdge.push(parseInt(edge[index1]))\r\n                                }\r\n                            }\r\n                            if (edgeValid) {\r\n                                edgeArrayFile.push(validEdge);\r\n                            }\r\n                        } else {\r\n                            txtFileClass = \"show\";\r\n                            txtFileClassFeedBack = \"Edge \" + (index - 2) + \" does not have enough information.\";\r\n                            edgeArrayFile = [];\r\n                            edgeArrayFileValid = false;\r\n                        }\r\n                    }\r\n                    if (edgeArrayFileValid) {\r\n                        txtFileClass = \"hide\";\r\n                        txtFileClassFeedBack = \"\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.setState({ txtFileClass, txtFileClassFeedBack, \"noEdgesFile\": noEdges, \"noNodesFile\": noNodes, nodeEdgesFileValid, edgeArrayFile, edgeArrayFileValid, uploadBtnClass: \"show\", uploadingBtnClass: \"hide\" });\r\n    }\r\n    getDataFromSubForm(data) {\r\n        if (data && data.valid) {\r\n            this.setState({ noEdges: data.noEdges, noNodes: data.noNodes, nodeEdgesValid: true }, () => {\r\n                var list = [];\r\n                for (let index = 0; index < data.noEdges; index++) {\r\n                    list.push([]);\r\n                }\r\n                this.setState({ edgeArray: list });\r\n            });\r\n        } else {\r\n            this.setState({ noEdges: 0, noNodes: 0 }, () => {\r\n                var list = [];\r\n                for (let index = 0; index < data.noEdges; index++) {\r\n                    list.push([]);\r\n                }\r\n                this.setState({ edgeArray: list });\r\n            });\r\n        }\r\n    }\r\n\r\n    getDataFromEdges(data) {\r\n        var newList = this.state.edgeArray;\r\n        if (data && data.valid) {\r\n            newList[data.index] = data.edge;\r\n        } else {\r\n            newList[data.index] = [];\r\n        }\r\n        var isValid = true;\r\n        this.setState({ edgeArray: newList }, () => {\r\n            for (let index = 0; index < newList.length; index++) {\r\n                if (newList[index].length === 0) {\r\n                    isValid = false;\r\n                    break;\r\n                }\r\n\r\n            }\r\n            this.setState({ edgeArrayValid: isValid });\r\n        });\r\n    }\r\n\r\n    openModal(event) {\r\n        this.setShowModal(true);\r\n    }\r\n    setShowModal(choice) {\r\n        this.setState({ showModal: choice });\r\n    }\r\n    clearForm() {\r\n        this.setState({\r\n            showModal: false,\r\n            graphClass: \"show\",\r\n            fileClass: \"hide\",\r\n            randomClass: \"hide\",\r\n            uploadingBtnClass: \"hide\",\r\n            uploadBtnClass: \"show\",\r\n            noNodes: 0,\r\n            noEdges: 0,\r\n            nodeEdgesValid: false,\r\n            edgeArray: [],\r\n            edgeArrayValid: false,\r\n            txtFileClass: \"hide\",\r\n            txtFileClassFeedBack: \"Please upload a file with a txt extension.\",\r\n            nodeEdgesGrValid: false,\r\n            noEdgesGr: 0,\r\n            noNodesGr: 0,\r\n            weightClass: \"hide\",\r\n            weightFeedback: \"\",\r\n            weight: 0,\r\n            maxWeightValid: false,\r\n            txtFileChosen: false,\r\n            noEdgesFile: 0,\r\n            noNodesFile: 0,\r\n            nodeEdgesFileValid: false,\r\n            edgeArrayFile: [],\r\n            edgeArrayFileValid: false\r\n        });\r\n    }\r\n    render() {\r\n        const { noNodes, graphClass, fileClass, randomClass, uploadingBtnClass, uploadBtnClass, fileMaxFlowBtnClass, noEdges, txtFileClass, txtFileClassFeedBack, weightClass, weightFeedback, showModal } = this.state;\r\n        const infoDis = this.state.edgeArrayValid && this.state.nodeEdgesValid ? \"\" : \"disabled\";\r\n        const fileDis = this.state.edgeArrayFileValid && this.state.nodeEdgesFileValid ? \"\" : \"disabled\";\r\n        const graphDis = this.state.maxWeightValid && this.state.nodeEdgesGrValid ? \"\" : \"disabled\";\r\n        if (noEdges > 0) {\r\n            var rows = [];\r\n            for (let index = 0; index < noEdges; index++) {\r\n                rows.push(<EdgeForm key={index} index={index} nodes={noNodes} getData={this.getDataFromEdges} />);\r\n            }\r\n        }\r\n        const detailsInfo = { \"noNodes\": this.state.noNodes, \"noEdges\": this.state.noEdges, \"edgeArray\": this.state.edgeArray };\r\n        const detailsFile = { \"noNodes\": this.state.noNodesFile, \"noEdges\": this.state.noEdgesFile, \"edgeArray\": this.state.edgeArrayFile };\r\n        const detailsRand = { \"noNodes\": this.state.noNodesGr, \"noEdges\": this.state.noEdgesGr, \"maxWeight\": this.state.weight };\r\n        const screenHeight = window.screen.height + \"px\";\r\n        return (\r\n            < Container style={{ minHeight: screenHeight }} className=\"py-5\" >\r\n                <Title title={this.title} />\r\n                <Row>\r\n                    <Col lg={{ span: 8, offset: 2 }}>\r\n                        <h2>Find Max Flow</h2>\r\n                        <Form>\r\n                            <fieldset>\r\n                                <Form.Group as={Row}>\r\n                                    <Col >\r\n                                        <Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"By entering the graph information\"\r\n                                            name=\"form-radio-opt\"\r\n                                            id=\"form-radio-opt1\"\r\n                                            value=\"1\"\r\n                                            onChange={this.handleOptionSelected}\r\n                                            defaultChecked\r\n                                        /><Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"By uploading a file\"\r\n                                            name=\"form-radio-opt\"\r\n                                            id=\"form-radio-opt2\"\r\n                                            value=\"2\"\r\n                                            onChange={this.handleOptionSelected}\r\n                                        /><Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"By using a randomly generated graph\"\r\n                                            name=\"form-radio-opt\"\r\n                                            id=\"form-radio-opt3\"\r\n                                            value=\"3\"\r\n                                            onChange={this.handleOptionSelected}\r\n                                        />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </fieldset>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <Row className={graphClass}>\r\n                    <Form>\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Enter Graph Information</h2>\r\n                            <GraphForm getData={this.getDataFromSubForm} />\r\n                            {rows}\r\n                            <Form.Group as={Row}>\r\n                                <Col className=\"mt-3\">\r\n                                    <Link to={{\r\n                                        pathname: \"/results\",\r\n                                        state: {\r\n                                            details: detailsInfo,\r\n                                            option: 1\r\n                                        }\r\n                                    }}><Button className=\"form-submit-btn px-3\" disabled={infoDis}>Find Max Flow</Button></Link>\r\n                                </Col>\r\n                                <Col md={7} className=\"px-md-5 mt-3\">\r\n                                    <Button variant=\"secondary\" className=\"form-clear-btn px-5\" type=\"reset\" onClick={this.clearForm} >Clear</Button>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                    </Form>\r\n                </Row>\r\n                <Row className={fileClass}>\r\n                    <Form>\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Upload<Button onClick={this.openModal} className=\"upld-file-format\"><h2><u>File</u></h2></Button>\r\n                                <CustomModal\r\n                                    show={showModal}\r\n                                    onHide={this.setShowModal}\r\n                                />\r\n                                  with graph information</h2>\r\n                            <Form.Group >\r\n                                <Form.File className={uploadBtnClass} id=\"form-upload-file\" custom>\r\n                                    <Form.File.Input className=\"col-md-4\" onChange={e =>\r\n                                        this.validateFile(e.target.files[0])} accept=\".txt\" />\r\n                                    <Form.File.Label className=\"col-md-4\" data-browse=\"Upload File\">\r\n                                        flow.txt\r\n                                    </Form.File.Label>\r\n                                </Form.File>\r\n                                <Form.Control.Feedback type=\"invalid\" className={txtFileClass}>\r\n                                    {txtFileClassFeedBack}\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Form.Group className={uploadingBtnClass}>\r\n                                <Button variant=\"primary\" disabled>\r\n                                    <Spinner\r\n                                        as=\"span\"\r\n                                        animation=\"grow\"\r\n                                        size=\"sm\"\r\n                                        role=\"status\"\r\n                                        aria-hidden=\"true\"\r\n                                    />\r\n                                        Uploading...\r\n                                </Button>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row}>\r\n                                <Col className={fileMaxFlowBtnClass}>\r\n                                    <Link to={{\r\n                                        pathname: \"/results\",\r\n                                        state: {\r\n                                            details: detailsFile,\r\n                                            option: 2\r\n                                        }\r\n                                    }}><Button className=\"form-submit-btn\" disabled={fileDis}>Find Max Flow</Button></Link>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                    </Form>\r\n                </Row>\r\n                <Row className={randomClass}>\r\n                    <Form>\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Enter information of graph to be generated </h2>\r\n                            <GraphForm getData={this.getDataFromRand} />\r\n                            <Form.Group as={Row} controlId={\"form-max-weight\"}>\r\n                                <Form.Label column md={4} >Max Weight of an Edge</Form.Label>\r\n                                <Col md={4} >\r\n                                    <Form.Control onChange={this.validateMaxWeight} />\r\n                                    <Form.Control.Feedback type=\"invalid\" className={weightClass}>\r\n                                        {weightFeedback}\r\n                                    </Form.Control.Feedback>\r\n                                </Col>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row}>\r\n                                <Col className=\"mt-3\">\r\n                                    <Link to={{\r\n                                        pathname: \"/results\",\r\n                                        state: {\r\n                                            details: detailsRand,\r\n                                            option: 3\r\n                                        }\r\n                                    }}><Button className=\"form-submit-btn px-3\" disabled={graphDis}>Find Max Flow</Button></Link>\r\n                                </Col>\r\n                                <Col md={7} className=\"px-md-5 mt-3\">\r\n                                    <Button variant=\"secondary\" className=\"form-clear-btn px-5\" type=\"reset\" onClick={this.clearForm} >Clear</Button>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                    </Form>\r\n                </Row>\r\n            </Container >\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Container, Col, Row } from 'react-bootstrap'\r\nimport '../external-stylesheet.css'\r\nimport Title from '../components/title'\r\nexport default class Error extends Component {\r\n    title = \"Error | MX flow\";\r\n    render() {\r\n        const { message } = this.props;\r\n        const screenHeight = window.screen.height + \"px\";\r\n        return (\r\n            <Container style={{ minHeight: screenHeight }}  className=\"py-5\">\r\n                <Title title={this.title} />\r\n                <Row>\r\n                    <Col lg={{ span: 8, offset: 2 }}>\r\n                        <img\r\n                            alt=\"Error Logo\"\r\n                            src=\"./images/oops-real.png\"\r\n                            className=\"img-fluid\"\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col lg={{ span: 8, offset: 2 }} className='text-center mt-5'><h2>{message || \"404 Page Not Found\"}</h2></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col lg={{ span: 8, offset: 2 }} className='text-center mt-2'><h3>Go back to the home <a href=\"/\">page</a></h3></Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Spinner, Col } from 'react-bootstrap'\r\nimport '../external-stylesheet.css'\r\nimport Title from '../components/title'\r\nexport default class Loading extends Component {\r\n    title = \"Loading | MX flow\"\r\n    render() {\r\n        const screenHeight = window.screen.height + \"px\";\r\n        return (\r\n            <div style={{ minHeight: screenHeight }} className=\"center-div text-center\">\r\n                <Title title={this.title} />\r\n                <Col lg={{ span: 8, offset: 2 }}>\r\n                    <Spinner animation=\"border\" className=\"loading-spinner\" />\r\n\r\n                    <h2 className=\"pt-5\">Loading...</h2>\r\n                </Col>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport CytoscapeComponent from 'react-cytoscapejs'\r\nexport default class Graph extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            elements: props.elements,\r\n            style: props.style,\r\n            stylesheet: [\r\n                {\r\n                    selector: 'node',\r\n                    style: {\r\n                        width: 50,\r\n                        height: 50,\r\n                        shape: 'circle',\r\n                        label: 'data(label)',\r\n                        'text-valign': 'center',\r\n                        'background-color': '#8ad6f2'\r\n\r\n                    }\r\n                },\r\n                {\r\n                    selector: 'edge',\r\n                    style: {\r\n                        'width': 3,\r\n                        label: 'data(label)',\r\n                        'line-color': '#ccc',\r\n                        'target-arrow-color': '#ccc',\r\n                        'target-arrow-shape': 'triangle',\r\n                        'curve-style': 'bezier'\r\n                    }\r\n                }\r\n            ],\r\n            minZoom: 0.5,\r\n            maxZoom: 1.5\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CytoscapeComponent\r\n                    elements={this.state.elements}\r\n                    style={this.state.style}\r\n                    stylesheet={this.state.stylesheet}\r\n                    minZoom={this.state.minZoom}\r\n                    maxZoom={this.state.maxZoon}\r\n                    cy={(cy) => { this.cy = cy }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Container, Col, Row, Button } from 'react-bootstrap'\r\nimport '../external-stylesheet.css'\r\nimport Title from '../components/title'\r\nimport Error from './404'\r\nimport Loading from './loading'\r\nimport Graph from '../components/graph-template'\r\nexport default class Results extends Component {\r\n    title = \"Results | MX flow\"\r\n    urlString = \"\";\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: { message: \"\" },\r\n            isLoaded: false,\r\n            inputElements: [],\r\n            residualElements: [],\r\n            resultElements: [],\r\n            flowBreakDown: [],\r\n            maxFlow: 0,\r\n            style: {},\r\n            noNodes: 0,\r\n            noEdges: 0,\r\n            originalGraph: []\r\n        };\r\n        var option = 4;\r\n        if (this.props.location.state != null) {\r\n            option = this.props.location.state.option;\r\n            var details = this.props.location.state.details;\r\n        }\r\n        if (option != null && (option === 1 || option === 2)) {\r\n            this.urlString = \"https://mxflow.herokuapp.com/api/maxflow\";\r\n            console.log(this.urlString);\r\n            this.getResults(this.urlString, details);\r\n        } else if (option != null && option === 3) {\r\n            this.urlString = \"https://mxflow.herokuapp.com/api/random\";\r\n            console.log(this.urlString);\r\n            this.getResults(this.urlString, details);\r\n        } else {\r\n            const errorMessage = \"Input graph not provided\";\r\n            this.state.error = { message: errorMessage };\r\n            this.state.isLoaded = true;\r\n        }\r\n        this.handleResultsSuccess = this.handleResultsSuccess.bind(this);\r\n        this.downloadtxt = this.downloadtxt.bind(this);\r\n\r\n    }\r\n\r\n    getResults(urlString, details) {\r\n        console.log({ urlString, details });\r\n        fetch(urlString, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(details),\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n        })\r\n            .then((res) => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.handleResultsSuccess(result);\r\n                },\r\n                (error) => {\r\n                    this.setState({ error });\r\n                }\r\n            );\r\n    }\r\n    //Checks if the results have been fetched\r\n    handleResultsSuccess(result) {\r\n        if (result && result.sent) {\r\n            var noNodes = result.sink + 1;\r\n            var noEdges = result.edges;\r\n            var inputElements = [];\r\n            var residualElements = [];\r\n            var resultElements = [];\r\n            var nodesPerRow = Math.ceil(Math.sqrt(noNodes));\r\n            var maxWidth = nodesPerRow * 100;\r\n            var xpos = 50;\r\n            var ypos = -50;\r\n            for (let index = 0; index < noNodes; index++) {\r\n                if ((index % nodesPerRow) === 0) {\r\n                    ypos += 100;\r\n                    xpos = 50\r\n                } else {\r\n                    xpos += 100\r\n                }\r\n                var name = index;\r\n                if (index === 0) {\r\n                    name = \"source\";\r\n                } else if (index === noNodes - 1) {\r\n                    name = \"sink\"\r\n                }\r\n                var data = { \"data\": { \"id\": name, \"label\": name }, \"position\": { \"x\": xpos, \"y\": ypos } };\r\n                inputElements.push(data);\r\n                residualElements.push(data);\r\n                resultElements.push(data);\r\n            }\r\n            for (let index = 0; index < result.original.length; index++) {\r\n                var array = result.original[index];\r\n                for (let index = 0; index < array.length; index++) {\r\n                    var edge = array[index];\r\n                    var sourceName = edge.start;\r\n                    if (edge.start === 0) {\r\n                        sourceName = \"source\";\r\n                    }\r\n                    var sinkName = edge.end;\r\n                    if (edge.end === noNodes - 1) {\r\n                        sinkName = \"sink\"\r\n                    }\r\n                    data = { \"data\": { \"source\": sourceName, \"target\": sinkName, \"label\": edge.weight } }\r\n                    inputElements.push(data);\r\n                }\r\n            }\r\n            for (let index = 0; index < result.residual.length; index++) {\r\n                array = result.residual[index];\r\n                for (let index = 0; index < array.length; index++) {\r\n                    edge = array[index];\r\n                    sourceName = edge.start;\r\n                    if (edge.start === 0) {\r\n                        sourceName = \"source\";\r\n                    } else if (edge.start === noNodes - 1) {\r\n                        sourceName = \"sink\";\r\n                    }\r\n                    sinkName = edge.end;\r\n                    if (edge.end === noNodes - 1) {\r\n                        sinkName = \"sink\"\r\n                    } else if (edge.end === 0) {\r\n                        sinkName = \"source\";\r\n                    }\r\n                    data = { \"data\": { \"source\": sourceName, \"target\": sinkName, \"label\": edge.weight } }\r\n                    residualElements.push(data);\r\n                }\r\n            }\r\n            for (let index = 0; index < result.result.length; index++) {\r\n                array = result.result[index];\r\n                for (let index = 0; index < array.length; index++) {\r\n                    edge = array[index];\r\n                    sourceName = edge.start;\r\n                    if (edge.start === 0) {\r\n                        sourceName = \"source\";\r\n                    }\r\n                    sinkName = edge.end;\r\n                    if (edge.end === noNodes - 1) {\r\n                        sinkName = \"sink\"\r\n                    }\r\n                    data = { \"data\": { \"source\": sourceName, \"target\": sinkName, \"label\": edge.weight } }\r\n                    resultElements.push(data);\r\n                }\r\n            }\r\n            var width = maxWidth;\r\n            if (maxWidth < 500) {\r\n                width = 500;\r\n            }\r\n            var breakDownFlow = [];\r\n            for (let index = 0; index < result.breakDownOfFlow.length; index++) {\r\n                const outerList = result.breakDownOfFlow[index];\r\n                var indexOfSource = outerList.indexOf(0);\r\n                var row = \"\";\r\n                for (let i = indexOfSource; i >= 0; i--) {\r\n                    row += outerList[i];\r\n                    if (i === 0) {\r\n                        row += \" = \";\r\n                    } else {\r\n                        row += \" –> \";\r\n                    }\r\n                }\r\n                row += outerList[(outerList.length - 1)];\r\n                breakDownFlow.push(row);\r\n            }\r\n            this.setState({ noNodes, noEdges, inputElements, residualElements, resultElements, flowBreakDown: breakDownFlow, maxFlow: result.maxFlow, isLoaded: true, style: { \"border\": \"1px solid black\", \"width\": width, \"height\": maxWidth }, originalGraph: result.original });\r\n        } else {\r\n            this.setState({ noEdges: 0, noNodes: 0, inputElements: [], residualElements: [], resultElements: [], flowBreakDown: [], maxFlow: 0, isLoaded: true, error: { message: result.message }, originalGraph: [] });\r\n        }\r\n    }\r\n\r\n    downloadtxt() {\r\n        var graph = this.state.originalGraph;\r\n        var noNodes = this.state.noNodes;\r\n        var noEdges = this.state.noEdges;\r\n        var txtContent = noNodes + \"\\n\" + noEdges + \"\";\r\n        for (let index = 0; index < graph.length; index++) {\r\n            var array = graph[index];\r\n            for (let index1 = 0; index1 < array.length; index1++) {\r\n                var edge = array[index1];\r\n                var row = \"\\n\" + edge.start + \" \" + edge.weight + \" \" + edge.end;\r\n                txtContent += row;\r\n            }\r\n        }\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([txtContent], { type: 'text/plain' });\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = \"Graph.txt\";\r\n        element.click();\r\n    }\r\n    render() {\r\n        const { error, isLoaded, inputElements, residualElements, resultElements, flowBreakDown, maxFlow, style } = this.state;\r\n        const screenHeight = window.screen.height + \"px\";\r\n        if (error && error.message !== \"\") {\r\n            return <Error message={error.message} />\r\n        } else if (!isLoaded) {\r\n            return <Loading />\r\n        } else {\r\n            return (\r\n                <Container style={{ minHeight: screenHeight }} className=\"container-results py-5\" md={10}>\r\n                    <Title title={this.title} />\r\n                    <Row className=\"pt-5\">\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h4>The maximum flow for the below graph is <b>{maxFlow}</b></h4>\r\n                            <h4>Source - 0</h4>\r\n                            <h4>Sink - {this.state.noNodes}</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row >\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Input Graph</h2>\r\n                            <Graph elements={inputElements} style={style} />\r\n                            <Button className=\"mt-3\" onClick={this.downloadtxt} >Download Input Graph as a txt file</Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"pt-5\">\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Result Graph</h2>\r\n                            <Graph elements={resultElements} style={style} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"pt-5\">\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Residual Graph</h2>\r\n                            <Graph elements={residualElements} style={style} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"pt-5 pb-5\">\r\n                        <Col lg={{ span: 8, offset: 2 }}>\r\n                            <h2>Break Down of flow</h2>\r\n\r\n                            {flowBreakDown && flowBreakDown.map((item, index) => (\r\n                                <p><b>{index + 1}.</b>&nbsp;{item}</p>\r\n                            ))}\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Container>\r\n            );\r\n        }\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport './footer.css'\r\nexport default class Footer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"footer-content text-center\">\r\n                <div className=\"p-2\">© 2020 Copyright:&nbsp;\r\n                <a className=\"footer-link\" target=\"_blank\"\r\n            without=\"true\"\r\n            rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/safiyyah-r-408652132/\">Safiyyah Thur Rahman</a>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './scroll-to-top.css'\r\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class ScrollToTop extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showBtn: false\r\n        }\r\n        this.scrollToTop = this.scrollToTop.bind(this);\r\n        this.checkIfScrolled = this.checkIfScrolled.bind(this);\r\n    }\r\n    scrollToTop() {\r\n        window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    }\r\n    checkIfScrolled() {\r\n        var showBtn = this.state.showBtn;\r\n        if (!this.state.showBtn && window.pageYOffset > window.screenY) {\r\n            showBtn = true;\r\n        } else if (this.state.showBtn && window.pageYOffset <= window.screenY) {\r\n            showBtn = false;\r\n        }\r\n        this.setState({ showBtn });\r\n    }\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.checkIfScrolled);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.checkIfScrolled);\r\n    }\r\n\r\n    render() {\r\n        const { showBtn } = this.state;\r\n        return (\r\n            <div className=\"custom-div-scroll-top\">\r\n                <Button className=\"custom-btn-scroll-top\" type=\"button\" onClick={this.scrollToTop} style={{ display: showBtn ? 'flex' : 'none' }}>\r\n                    <FontAwesomeIcon className=\"custom-scroll-top\" icon={faArrowUp} />\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport { Nav, NavItem, Navbar } from \"react-bootstrap\";\r\nimport { NavLink } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faCalculator, faHome } from '@fortawesome/free-solid-svg-icons'\r\nimport './navbar.css'\r\nexport default class NavBar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Navbar expand=\"lg\" className=\"navbar-background shadow\" sticky=\"top\">\r\n                <Navbar.Brand href=\"/\" className=\" ml-2\">\r\n                    <img\r\n                        alt=\"Website logo\"\r\n                        src=\"./images/logo.png\"\r\n                        width=\"auto\"\r\n                        height=\"40\"\r\n                        className=\"d-inline-block align-top\"\r\n                    />\r\n                    <span className=\"navbar-title\">\r\n                        <span id=\"navbar-span-mx\">MX&nbsp;</span>\r\n                        <span id=\"navbar-span-flow\">flow</span>\r\n                    </span>\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"navbar-responsive\" className=\"mr-2\" />\r\n                <Navbar.Collapse id=\"navbar-responsive\">\r\n                    <Nav className=\"align-items-center justify-content-end navbar-custom-collapse\">\r\n                        <NavLink className=\"custom-link\" to=\"/\" exact activeClassName=\"active\">\r\n                            <NavItem className=\"p-3 custom-nav-item text-center\" ><FontAwesomeIcon className=\"custom-link-icon\" icon={faHome} />Home</NavItem>\r\n                        </NavLink>\r\n                        <NavLink className=\"custom-link\" to=\"/maxflow\" activeClassName=\"active\">\r\n                            <NavItem className=\"p-3 custom-nav-item text-center\" ><FontAwesomeIcon className=\"custom-link-icon\" icon={faCalculator} />Find Max Flow</NavItem>\r\n                        </NavLink>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport Home from './pages/index';\nimport MaxFlow from './pages/maxflow';\nimport Results from './pages/results';\nimport Error from './pages/404';\nimport Footer from './components/footer'\nimport ScrollToTop from './components/scroll-to-top'\nimport NavBar from './components/navbar';\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <NavBar />\n          <ScrollToTop />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/maxflow\" component={MaxFlow} />\n            <Route path=\"/results\" component={Results} />\n            <Route component={Error} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>);\n  }\n\n\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}